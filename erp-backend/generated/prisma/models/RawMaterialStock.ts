
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `RawMaterialStock` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model RawMaterialStock
 * 
 */
export type RawMaterialStockModel = runtime.Types.Result.DefaultSelection<Prisma.$RawMaterialStockPayload>

export type AggregateRawMaterialStock = {
  _count: RawMaterialStockCountAggregateOutputType | null
  _avg: RawMaterialStockAvgAggregateOutputType | null
  _sum: RawMaterialStockSumAggregateOutputType | null
  _min: RawMaterialStockMinAggregateOutputType | null
  _max: RawMaterialStockMaxAggregateOutputType | null
}

export type RawMaterialStockAvgAggregateOutputType = {
  quantity: runtime.Decimal | null
}

export type RawMaterialStockSumAggregateOutputType = {
  quantity: runtime.Decimal | null
}

export type RawMaterialStockMinAggregateOutputType = {
  id: string | null
  rawMaterialId: string | null
  quantity: runtime.Decimal | null
  batchNumber: string | null
  expiryDate: Date | null
  qualityChecked: boolean | null
}

export type RawMaterialStockMaxAggregateOutputType = {
  id: string | null
  rawMaterialId: string | null
  quantity: runtime.Decimal | null
  batchNumber: string | null
  expiryDate: Date | null
  qualityChecked: boolean | null
}

export type RawMaterialStockCountAggregateOutputType = {
  id: number
  rawMaterialId: number
  quantity: number
  batchNumber: number
  expiryDate: number
  qualityChecked: number
  _all: number
}


export type RawMaterialStockAvgAggregateInputType = {
  quantity?: true
}

export type RawMaterialStockSumAggregateInputType = {
  quantity?: true
}

export type RawMaterialStockMinAggregateInputType = {
  id?: true
  rawMaterialId?: true
  quantity?: true
  batchNumber?: true
  expiryDate?: true
  qualityChecked?: true
}

export type RawMaterialStockMaxAggregateInputType = {
  id?: true
  rawMaterialId?: true
  quantity?: true
  batchNumber?: true
  expiryDate?: true
  qualityChecked?: true
}

export type RawMaterialStockCountAggregateInputType = {
  id?: true
  rawMaterialId?: true
  quantity?: true
  batchNumber?: true
  expiryDate?: true
  qualityChecked?: true
  _all?: true
}

export type RawMaterialStockAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RawMaterialStock to aggregate.
   */
  where?: Prisma.RawMaterialStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterialStocks to fetch.
   */
  orderBy?: Prisma.RawMaterialStockOrderByWithRelationInput | Prisma.RawMaterialStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RawMaterialStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterialStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterialStocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RawMaterialStocks
  **/
  _count?: true | RawMaterialStockCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RawMaterialStockAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RawMaterialStockSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RawMaterialStockMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RawMaterialStockMaxAggregateInputType
}

export type GetRawMaterialStockAggregateType<T extends RawMaterialStockAggregateArgs> = {
      [P in keyof T & keyof AggregateRawMaterialStock]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRawMaterialStock[P]>
    : Prisma.GetScalarType<T[P], AggregateRawMaterialStock[P]>
}




export type RawMaterialStockGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RawMaterialStockWhereInput
  orderBy?: Prisma.RawMaterialStockOrderByWithAggregationInput | Prisma.RawMaterialStockOrderByWithAggregationInput[]
  by: Prisma.RawMaterialStockScalarFieldEnum[] | Prisma.RawMaterialStockScalarFieldEnum
  having?: Prisma.RawMaterialStockScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RawMaterialStockCountAggregateInputType | true
  _avg?: RawMaterialStockAvgAggregateInputType
  _sum?: RawMaterialStockSumAggregateInputType
  _min?: RawMaterialStockMinAggregateInputType
  _max?: RawMaterialStockMaxAggregateInputType
}

export type RawMaterialStockGroupByOutputType = {
  id: string
  rawMaterialId: string
  quantity: runtime.Decimal
  batchNumber: string | null
  expiryDate: Date | null
  qualityChecked: boolean
  _count: RawMaterialStockCountAggregateOutputType | null
  _avg: RawMaterialStockAvgAggregateOutputType | null
  _sum: RawMaterialStockSumAggregateOutputType | null
  _min: RawMaterialStockMinAggregateOutputType | null
  _max: RawMaterialStockMaxAggregateOutputType | null
}

type GetRawMaterialStockGroupByPayload<T extends RawMaterialStockGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RawMaterialStockGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RawMaterialStockGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RawMaterialStockGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RawMaterialStockGroupByOutputType[P]>
      }
    >
  >



export type RawMaterialStockWhereInput = {
  AND?: Prisma.RawMaterialStockWhereInput | Prisma.RawMaterialStockWhereInput[]
  OR?: Prisma.RawMaterialStockWhereInput[]
  NOT?: Prisma.RawMaterialStockWhereInput | Prisma.RawMaterialStockWhereInput[]
  id?: Prisma.StringFilter<"RawMaterialStock"> | string
  rawMaterialId?: Prisma.StringFilter<"RawMaterialStock"> | string
  quantity?: Prisma.DecimalFilter<"RawMaterialStock"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.StringNullableFilter<"RawMaterialStock"> | string | null
  expiryDate?: Prisma.DateTimeNullableFilter<"RawMaterialStock"> | Date | string | null
  qualityChecked?: Prisma.BoolFilter<"RawMaterialStock"> | boolean
  rawMaterial?: Prisma.XOR<Prisma.RawMaterialScalarRelationFilter, Prisma.RawMaterialWhereInput>
}

export type RawMaterialStockOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  expiryDate?: Prisma.SortOrderInput | Prisma.SortOrder
  qualityChecked?: Prisma.SortOrder
  rawMaterial?: Prisma.RawMaterialOrderByWithRelationInput
}

export type RawMaterialStockWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RawMaterialStockWhereInput | Prisma.RawMaterialStockWhereInput[]
  OR?: Prisma.RawMaterialStockWhereInput[]
  NOT?: Prisma.RawMaterialStockWhereInput | Prisma.RawMaterialStockWhereInput[]
  rawMaterialId?: Prisma.StringFilter<"RawMaterialStock"> | string
  quantity?: Prisma.DecimalFilter<"RawMaterialStock"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.StringNullableFilter<"RawMaterialStock"> | string | null
  expiryDate?: Prisma.DateTimeNullableFilter<"RawMaterialStock"> | Date | string | null
  qualityChecked?: Prisma.BoolFilter<"RawMaterialStock"> | boolean
  rawMaterial?: Prisma.XOR<Prisma.RawMaterialScalarRelationFilter, Prisma.RawMaterialWhereInput>
}, "id">

export type RawMaterialStockOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  expiryDate?: Prisma.SortOrderInput | Prisma.SortOrder
  qualityChecked?: Prisma.SortOrder
  _count?: Prisma.RawMaterialStockCountOrderByAggregateInput
  _avg?: Prisma.RawMaterialStockAvgOrderByAggregateInput
  _max?: Prisma.RawMaterialStockMaxOrderByAggregateInput
  _min?: Prisma.RawMaterialStockMinOrderByAggregateInput
  _sum?: Prisma.RawMaterialStockSumOrderByAggregateInput
}

export type RawMaterialStockScalarWhereWithAggregatesInput = {
  AND?: Prisma.RawMaterialStockScalarWhereWithAggregatesInput | Prisma.RawMaterialStockScalarWhereWithAggregatesInput[]
  OR?: Prisma.RawMaterialStockScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RawMaterialStockScalarWhereWithAggregatesInput | Prisma.RawMaterialStockScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RawMaterialStock"> | string
  rawMaterialId?: Prisma.StringWithAggregatesFilter<"RawMaterialStock"> | string
  quantity?: Prisma.DecimalWithAggregatesFilter<"RawMaterialStock"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.StringNullableWithAggregatesFilter<"RawMaterialStock"> | string | null
  expiryDate?: Prisma.DateTimeNullableWithAggregatesFilter<"RawMaterialStock"> | Date | string | null
  qualityChecked?: Prisma.BoolWithAggregatesFilter<"RawMaterialStock"> | boolean
}

export type RawMaterialStockCreateInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: string | null
  expiryDate?: Date | string | null
  qualityChecked?: boolean
  rawMaterial: Prisma.RawMaterialCreateNestedOneWithoutStockItemsInput
}

export type RawMaterialStockUncheckedCreateInput = {
  id?: string
  rawMaterialId: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: string | null
  expiryDate?: Date | string | null
  qualityChecked?: boolean
}

export type RawMaterialStockUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  qualityChecked?: Prisma.BoolFieldUpdateOperationsInput | boolean
  rawMaterial?: Prisma.RawMaterialUpdateOneRequiredWithoutStockItemsNestedInput
}

export type RawMaterialStockUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rawMaterialId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  qualityChecked?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RawMaterialStockCreateManyInput = {
  id?: string
  rawMaterialId: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: string | null
  expiryDate?: Date | string | null
  qualityChecked?: boolean
}

export type RawMaterialStockUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  qualityChecked?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RawMaterialStockUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rawMaterialId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  qualityChecked?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RawMaterialStockListRelationFilter = {
  every?: Prisma.RawMaterialStockWhereInput
  some?: Prisma.RawMaterialStockWhereInput
  none?: Prisma.RawMaterialStockWhereInput
}

export type RawMaterialStockOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RawMaterialStockCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  qualityChecked?: Prisma.SortOrder
}

export type RawMaterialStockAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type RawMaterialStockMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  qualityChecked?: Prisma.SortOrder
}

export type RawMaterialStockMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrder
  expiryDate?: Prisma.SortOrder
  qualityChecked?: Prisma.SortOrder
}

export type RawMaterialStockSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type RawMaterialStockCreateNestedManyWithoutRawMaterialInput = {
  create?: Prisma.XOR<Prisma.RawMaterialStockCreateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput> | Prisma.RawMaterialStockCreateWithoutRawMaterialInput[] | Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput | Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput[]
  createMany?: Prisma.RawMaterialStockCreateManyRawMaterialInputEnvelope
  connect?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
}

export type RawMaterialStockUncheckedCreateNestedManyWithoutRawMaterialInput = {
  create?: Prisma.XOR<Prisma.RawMaterialStockCreateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput> | Prisma.RawMaterialStockCreateWithoutRawMaterialInput[] | Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput | Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput[]
  createMany?: Prisma.RawMaterialStockCreateManyRawMaterialInputEnvelope
  connect?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
}

export type RawMaterialStockUpdateManyWithoutRawMaterialNestedInput = {
  create?: Prisma.XOR<Prisma.RawMaterialStockCreateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput> | Prisma.RawMaterialStockCreateWithoutRawMaterialInput[] | Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput | Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput[]
  upsert?: Prisma.RawMaterialStockUpsertWithWhereUniqueWithoutRawMaterialInput | Prisma.RawMaterialStockUpsertWithWhereUniqueWithoutRawMaterialInput[]
  createMany?: Prisma.RawMaterialStockCreateManyRawMaterialInputEnvelope
  set?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  disconnect?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  delete?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  connect?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  update?: Prisma.RawMaterialStockUpdateWithWhereUniqueWithoutRawMaterialInput | Prisma.RawMaterialStockUpdateWithWhereUniqueWithoutRawMaterialInput[]
  updateMany?: Prisma.RawMaterialStockUpdateManyWithWhereWithoutRawMaterialInput | Prisma.RawMaterialStockUpdateManyWithWhereWithoutRawMaterialInput[]
  deleteMany?: Prisma.RawMaterialStockScalarWhereInput | Prisma.RawMaterialStockScalarWhereInput[]
}

export type RawMaterialStockUncheckedUpdateManyWithoutRawMaterialNestedInput = {
  create?: Prisma.XOR<Prisma.RawMaterialStockCreateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput> | Prisma.RawMaterialStockCreateWithoutRawMaterialInput[] | Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput | Prisma.RawMaterialStockCreateOrConnectWithoutRawMaterialInput[]
  upsert?: Prisma.RawMaterialStockUpsertWithWhereUniqueWithoutRawMaterialInput | Prisma.RawMaterialStockUpsertWithWhereUniqueWithoutRawMaterialInput[]
  createMany?: Prisma.RawMaterialStockCreateManyRawMaterialInputEnvelope
  set?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  disconnect?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  delete?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  connect?: Prisma.RawMaterialStockWhereUniqueInput | Prisma.RawMaterialStockWhereUniqueInput[]
  update?: Prisma.RawMaterialStockUpdateWithWhereUniqueWithoutRawMaterialInput | Prisma.RawMaterialStockUpdateWithWhereUniqueWithoutRawMaterialInput[]
  updateMany?: Prisma.RawMaterialStockUpdateManyWithWhereWithoutRawMaterialInput | Prisma.RawMaterialStockUpdateManyWithWhereWithoutRawMaterialInput[]
  deleteMany?: Prisma.RawMaterialStockScalarWhereInput | Prisma.RawMaterialStockScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type RawMaterialStockCreateWithoutRawMaterialInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: string | null
  expiryDate?: Date | string | null
  qualityChecked?: boolean
}

export type RawMaterialStockUncheckedCreateWithoutRawMaterialInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: string | null
  expiryDate?: Date | string | null
  qualityChecked?: boolean
}

export type RawMaterialStockCreateOrConnectWithoutRawMaterialInput = {
  where: Prisma.RawMaterialStockWhereUniqueInput
  create: Prisma.XOR<Prisma.RawMaterialStockCreateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput>
}

export type RawMaterialStockCreateManyRawMaterialInputEnvelope = {
  data: Prisma.RawMaterialStockCreateManyRawMaterialInput | Prisma.RawMaterialStockCreateManyRawMaterialInput[]
  skipDuplicates?: boolean
}

export type RawMaterialStockUpsertWithWhereUniqueWithoutRawMaterialInput = {
  where: Prisma.RawMaterialStockWhereUniqueInput
  update: Prisma.XOR<Prisma.RawMaterialStockUpdateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedUpdateWithoutRawMaterialInput>
  create: Prisma.XOR<Prisma.RawMaterialStockCreateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedCreateWithoutRawMaterialInput>
}

export type RawMaterialStockUpdateWithWhereUniqueWithoutRawMaterialInput = {
  where: Prisma.RawMaterialStockWhereUniqueInput
  data: Prisma.XOR<Prisma.RawMaterialStockUpdateWithoutRawMaterialInput, Prisma.RawMaterialStockUncheckedUpdateWithoutRawMaterialInput>
}

export type RawMaterialStockUpdateManyWithWhereWithoutRawMaterialInput = {
  where: Prisma.RawMaterialStockScalarWhereInput
  data: Prisma.XOR<Prisma.RawMaterialStockUpdateManyMutationInput, Prisma.RawMaterialStockUncheckedUpdateManyWithoutRawMaterialInput>
}

export type RawMaterialStockScalarWhereInput = {
  AND?: Prisma.RawMaterialStockScalarWhereInput | Prisma.RawMaterialStockScalarWhereInput[]
  OR?: Prisma.RawMaterialStockScalarWhereInput[]
  NOT?: Prisma.RawMaterialStockScalarWhereInput | Prisma.RawMaterialStockScalarWhereInput[]
  id?: Prisma.StringFilter<"RawMaterialStock"> | string
  rawMaterialId?: Prisma.StringFilter<"RawMaterialStock"> | string
  quantity?: Prisma.DecimalFilter<"RawMaterialStock"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.StringNullableFilter<"RawMaterialStock"> | string | null
  expiryDate?: Prisma.DateTimeNullableFilter<"RawMaterialStock"> | Date | string | null
  qualityChecked?: Prisma.BoolFilter<"RawMaterialStock"> | boolean
}

export type RawMaterialStockCreateManyRawMaterialInput = {
  id?: string
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: string | null
  expiryDate?: Date | string | null
  qualityChecked?: boolean
}

export type RawMaterialStockUpdateWithoutRawMaterialInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  qualityChecked?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RawMaterialStockUncheckedUpdateWithoutRawMaterialInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  qualityChecked?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RawMaterialStockUncheckedUpdateManyWithoutRawMaterialInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiryDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  qualityChecked?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type RawMaterialStockSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  batchNumber?: boolean
  expiryDate?: boolean
  qualityChecked?: boolean
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rawMaterialStock"]>

export type RawMaterialStockSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  batchNumber?: boolean
  expiryDate?: boolean
  qualityChecked?: boolean
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rawMaterialStock"]>

export type RawMaterialStockSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  batchNumber?: boolean
  expiryDate?: boolean
  qualityChecked?: boolean
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rawMaterialStock"]>

export type RawMaterialStockSelectScalar = {
  id?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  batchNumber?: boolean
  expiryDate?: boolean
  qualityChecked?: boolean
}

export type RawMaterialStockOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "rawMaterialId" | "quantity" | "batchNumber" | "expiryDate" | "qualityChecked", ExtArgs["result"]["rawMaterialStock"]>
export type RawMaterialStockInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}
export type RawMaterialStockIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}
export type RawMaterialStockIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}

export type $RawMaterialStockPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RawMaterialStock"
  objects: {
    rawMaterial: Prisma.$RawMaterialPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    rawMaterialId: string
    quantity: runtime.Decimal
    batchNumber: string | null
    expiryDate: Date | null
    qualityChecked: boolean
  }, ExtArgs["result"]["rawMaterialStock"]>
  composites: {}
}

export type RawMaterialStockGetPayload<S extends boolean | null | undefined | RawMaterialStockDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload, S>

export type RawMaterialStockCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RawMaterialStockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RawMaterialStockCountAggregateInputType | true
  }

export interface RawMaterialStockDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RawMaterialStock'], meta: { name: 'RawMaterialStock' } }
  /**
   * Find zero or one RawMaterialStock that matches the filter.
   * @param {RawMaterialStockFindUniqueArgs} args - Arguments to find a RawMaterialStock
   * @example
   * // Get one RawMaterialStock
   * const rawMaterialStock = await prisma.rawMaterialStock.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RawMaterialStockFindUniqueArgs>(args: Prisma.SelectSubset<T, RawMaterialStockFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RawMaterialStock that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RawMaterialStockFindUniqueOrThrowArgs} args - Arguments to find a RawMaterialStock
   * @example
   * // Get one RawMaterialStock
   * const rawMaterialStock = await prisma.rawMaterialStock.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RawMaterialStockFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RawMaterialStockFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RawMaterialStock that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialStockFindFirstArgs} args - Arguments to find a RawMaterialStock
   * @example
   * // Get one RawMaterialStock
   * const rawMaterialStock = await prisma.rawMaterialStock.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RawMaterialStockFindFirstArgs>(args?: Prisma.SelectSubset<T, RawMaterialStockFindFirstArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RawMaterialStock that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialStockFindFirstOrThrowArgs} args - Arguments to find a RawMaterialStock
   * @example
   * // Get one RawMaterialStock
   * const rawMaterialStock = await prisma.rawMaterialStock.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RawMaterialStockFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RawMaterialStockFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RawMaterialStocks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialStockFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RawMaterialStocks
   * const rawMaterialStocks = await prisma.rawMaterialStock.findMany()
   * 
   * // Get first 10 RawMaterialStocks
   * const rawMaterialStocks = await prisma.rawMaterialStock.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rawMaterialStockWithIdOnly = await prisma.rawMaterialStock.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RawMaterialStockFindManyArgs>(args?: Prisma.SelectSubset<T, RawMaterialStockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RawMaterialStock.
   * @param {RawMaterialStockCreateArgs} args - Arguments to create a RawMaterialStock.
   * @example
   * // Create one RawMaterialStock
   * const RawMaterialStock = await prisma.rawMaterialStock.create({
   *   data: {
   *     // ... data to create a RawMaterialStock
   *   }
   * })
   * 
   */
  create<T extends RawMaterialStockCreateArgs>(args: Prisma.SelectSubset<T, RawMaterialStockCreateArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RawMaterialStocks.
   * @param {RawMaterialStockCreateManyArgs} args - Arguments to create many RawMaterialStocks.
   * @example
   * // Create many RawMaterialStocks
   * const rawMaterialStock = await prisma.rawMaterialStock.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RawMaterialStockCreateManyArgs>(args?: Prisma.SelectSubset<T, RawMaterialStockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RawMaterialStocks and returns the data saved in the database.
   * @param {RawMaterialStockCreateManyAndReturnArgs} args - Arguments to create many RawMaterialStocks.
   * @example
   * // Create many RawMaterialStocks
   * const rawMaterialStock = await prisma.rawMaterialStock.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RawMaterialStocks and only return the `id`
   * const rawMaterialStockWithIdOnly = await prisma.rawMaterialStock.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RawMaterialStockCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RawMaterialStockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RawMaterialStock.
   * @param {RawMaterialStockDeleteArgs} args - Arguments to delete one RawMaterialStock.
   * @example
   * // Delete one RawMaterialStock
   * const RawMaterialStock = await prisma.rawMaterialStock.delete({
   *   where: {
   *     // ... filter to delete one RawMaterialStock
   *   }
   * })
   * 
   */
  delete<T extends RawMaterialStockDeleteArgs>(args: Prisma.SelectSubset<T, RawMaterialStockDeleteArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RawMaterialStock.
   * @param {RawMaterialStockUpdateArgs} args - Arguments to update one RawMaterialStock.
   * @example
   * // Update one RawMaterialStock
   * const rawMaterialStock = await prisma.rawMaterialStock.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RawMaterialStockUpdateArgs>(args: Prisma.SelectSubset<T, RawMaterialStockUpdateArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RawMaterialStocks.
   * @param {RawMaterialStockDeleteManyArgs} args - Arguments to filter RawMaterialStocks to delete.
   * @example
   * // Delete a few RawMaterialStocks
   * const { count } = await prisma.rawMaterialStock.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RawMaterialStockDeleteManyArgs>(args?: Prisma.SelectSubset<T, RawMaterialStockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RawMaterialStocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialStockUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RawMaterialStocks
   * const rawMaterialStock = await prisma.rawMaterialStock.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RawMaterialStockUpdateManyArgs>(args: Prisma.SelectSubset<T, RawMaterialStockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RawMaterialStocks and returns the data updated in the database.
   * @param {RawMaterialStockUpdateManyAndReturnArgs} args - Arguments to update many RawMaterialStocks.
   * @example
   * // Update many RawMaterialStocks
   * const rawMaterialStock = await prisma.rawMaterialStock.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RawMaterialStocks and only return the `id`
   * const rawMaterialStockWithIdOnly = await prisma.rawMaterialStock.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RawMaterialStockUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RawMaterialStockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RawMaterialStock.
   * @param {RawMaterialStockUpsertArgs} args - Arguments to update or create a RawMaterialStock.
   * @example
   * // Update or create a RawMaterialStock
   * const rawMaterialStock = await prisma.rawMaterialStock.upsert({
   *   create: {
   *     // ... data to create a RawMaterialStock
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RawMaterialStock we want to update
   *   }
   * })
   */
  upsert<T extends RawMaterialStockUpsertArgs>(args: Prisma.SelectSubset<T, RawMaterialStockUpsertArgs<ExtArgs>>): Prisma.Prisma__RawMaterialStockClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RawMaterialStocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialStockCountArgs} args - Arguments to filter RawMaterialStocks to count.
   * @example
   * // Count the number of RawMaterialStocks
   * const count = await prisma.rawMaterialStock.count({
   *   where: {
   *     // ... the filter for the RawMaterialStocks we want to count
   *   }
   * })
  **/
  count<T extends RawMaterialStockCountArgs>(
    args?: Prisma.Subset<T, RawMaterialStockCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RawMaterialStockCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RawMaterialStock.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialStockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RawMaterialStockAggregateArgs>(args: Prisma.Subset<T, RawMaterialStockAggregateArgs>): Prisma.PrismaPromise<GetRawMaterialStockAggregateType<T>>

  /**
   * Group by RawMaterialStock.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialStockGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RawMaterialStockGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RawMaterialStockGroupByArgs['orderBy'] }
      : { orderBy?: RawMaterialStockGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RawMaterialStockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRawMaterialStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RawMaterialStock model
 */
readonly fields: RawMaterialStockFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RawMaterialStock.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RawMaterialStockClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  rawMaterial<T extends Prisma.RawMaterialDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RawMaterialDefaultArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RawMaterialStock model
 */
export interface RawMaterialStockFieldRefs {
  readonly id: Prisma.FieldRef<"RawMaterialStock", 'String'>
  readonly rawMaterialId: Prisma.FieldRef<"RawMaterialStock", 'String'>
  readonly quantity: Prisma.FieldRef<"RawMaterialStock", 'Decimal'>
  readonly batchNumber: Prisma.FieldRef<"RawMaterialStock", 'String'>
  readonly expiryDate: Prisma.FieldRef<"RawMaterialStock", 'DateTime'>
  readonly qualityChecked: Prisma.FieldRef<"RawMaterialStock", 'Boolean'>
}
    

// Custom InputTypes
/**
 * RawMaterialStock findUnique
 */
export type RawMaterialStockFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterialStock to fetch.
   */
  where: Prisma.RawMaterialStockWhereUniqueInput
}

/**
 * RawMaterialStock findUniqueOrThrow
 */
export type RawMaterialStockFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterialStock to fetch.
   */
  where: Prisma.RawMaterialStockWhereUniqueInput
}

/**
 * RawMaterialStock findFirst
 */
export type RawMaterialStockFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterialStock to fetch.
   */
  where?: Prisma.RawMaterialStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterialStocks to fetch.
   */
  orderBy?: Prisma.RawMaterialStockOrderByWithRelationInput | Prisma.RawMaterialStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RawMaterialStocks.
   */
  cursor?: Prisma.RawMaterialStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterialStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterialStocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RawMaterialStocks.
   */
  distinct?: Prisma.RawMaterialStockScalarFieldEnum | Prisma.RawMaterialStockScalarFieldEnum[]
}

/**
 * RawMaterialStock findFirstOrThrow
 */
export type RawMaterialStockFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterialStock to fetch.
   */
  where?: Prisma.RawMaterialStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterialStocks to fetch.
   */
  orderBy?: Prisma.RawMaterialStockOrderByWithRelationInput | Prisma.RawMaterialStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RawMaterialStocks.
   */
  cursor?: Prisma.RawMaterialStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterialStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterialStocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RawMaterialStocks.
   */
  distinct?: Prisma.RawMaterialStockScalarFieldEnum | Prisma.RawMaterialStockScalarFieldEnum[]
}

/**
 * RawMaterialStock findMany
 */
export type RawMaterialStockFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterialStocks to fetch.
   */
  where?: Prisma.RawMaterialStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterialStocks to fetch.
   */
  orderBy?: Prisma.RawMaterialStockOrderByWithRelationInput | Prisma.RawMaterialStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RawMaterialStocks.
   */
  cursor?: Prisma.RawMaterialStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterialStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterialStocks.
   */
  skip?: number
  distinct?: Prisma.RawMaterialStockScalarFieldEnum | Prisma.RawMaterialStockScalarFieldEnum[]
}

/**
 * RawMaterialStock create
 */
export type RawMaterialStockCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * The data needed to create a RawMaterialStock.
   */
  data: Prisma.XOR<Prisma.RawMaterialStockCreateInput, Prisma.RawMaterialStockUncheckedCreateInput>
}

/**
 * RawMaterialStock createMany
 */
export type RawMaterialStockCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RawMaterialStocks.
   */
  data: Prisma.RawMaterialStockCreateManyInput | Prisma.RawMaterialStockCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RawMaterialStock createManyAndReturn
 */
export type RawMaterialStockCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * The data used to create many RawMaterialStocks.
   */
  data: Prisma.RawMaterialStockCreateManyInput | Prisma.RawMaterialStockCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * RawMaterialStock update
 */
export type RawMaterialStockUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * The data needed to update a RawMaterialStock.
   */
  data: Prisma.XOR<Prisma.RawMaterialStockUpdateInput, Prisma.RawMaterialStockUncheckedUpdateInput>
  /**
   * Choose, which RawMaterialStock to update.
   */
  where: Prisma.RawMaterialStockWhereUniqueInput
}

/**
 * RawMaterialStock updateMany
 */
export type RawMaterialStockUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RawMaterialStocks.
   */
  data: Prisma.XOR<Prisma.RawMaterialStockUpdateManyMutationInput, Prisma.RawMaterialStockUncheckedUpdateManyInput>
  /**
   * Filter which RawMaterialStocks to update
   */
  where?: Prisma.RawMaterialStockWhereInput
  /**
   * Limit how many RawMaterialStocks to update.
   */
  limit?: number
}

/**
 * RawMaterialStock updateManyAndReturn
 */
export type RawMaterialStockUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * The data used to update RawMaterialStocks.
   */
  data: Prisma.XOR<Prisma.RawMaterialStockUpdateManyMutationInput, Prisma.RawMaterialStockUncheckedUpdateManyInput>
  /**
   * Filter which RawMaterialStocks to update
   */
  where?: Prisma.RawMaterialStockWhereInput
  /**
   * Limit how many RawMaterialStocks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * RawMaterialStock upsert
 */
export type RawMaterialStockUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * The filter to search for the RawMaterialStock to update in case it exists.
   */
  where: Prisma.RawMaterialStockWhereUniqueInput
  /**
   * In case the RawMaterialStock found by the `where` argument doesn't exist, create a new RawMaterialStock with this data.
   */
  create: Prisma.XOR<Prisma.RawMaterialStockCreateInput, Prisma.RawMaterialStockUncheckedCreateInput>
  /**
   * In case the RawMaterialStock was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RawMaterialStockUpdateInput, Prisma.RawMaterialStockUncheckedUpdateInput>
}

/**
 * RawMaterialStock delete
 */
export type RawMaterialStockDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  /**
   * Filter which RawMaterialStock to delete.
   */
  where: Prisma.RawMaterialStockWhereUniqueInput
}

/**
 * RawMaterialStock deleteMany
 */
export type RawMaterialStockDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RawMaterialStocks to delete
   */
  where?: Prisma.RawMaterialStockWhereInput
  /**
   * Limit how many RawMaterialStocks to delete.
   */
  limit?: number
}

/**
 * RawMaterialStock without action
 */
export type RawMaterialStockDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
}
