
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductStock` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProductStock
 * 
 */
export type ProductStockModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductStockPayload>

export type AggregateProductStock = {
  _count: ProductStockCountAggregateOutputType | null
  _avg: ProductStockAvgAggregateOutputType | null
  _sum: ProductStockSumAggregateOutputType | null
  _min: ProductStockMinAggregateOutputType | null
  _max: ProductStockMaxAggregateOutputType | null
}

export type ProductStockAvgAggregateOutputType = {
  quantity: number | null
}

export type ProductStockSumAggregateOutputType = {
  quantity: number | null
}

export type ProductStockMinAggregateOutputType = {
  id: string | null
  productId: string | null
  quantity: number | null
  batchNumber: string | null
}

export type ProductStockMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  quantity: number | null
  batchNumber: string | null
}

export type ProductStockCountAggregateOutputType = {
  id: number
  productId: number
  quantity: number
  batchNumber: number
  _all: number
}


export type ProductStockAvgAggregateInputType = {
  quantity?: true
}

export type ProductStockSumAggregateInputType = {
  quantity?: true
}

export type ProductStockMinAggregateInputType = {
  id?: true
  productId?: true
  quantity?: true
  batchNumber?: true
}

export type ProductStockMaxAggregateInputType = {
  id?: true
  productId?: true
  quantity?: true
  batchNumber?: true
}

export type ProductStockCountAggregateInputType = {
  id?: true
  productId?: true
  quantity?: true
  batchNumber?: true
  _all?: true
}

export type ProductStockAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductStock to aggregate.
   */
  where?: Prisma.ProductStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductStocks to fetch.
   */
  orderBy?: Prisma.ProductStockOrderByWithRelationInput | Prisma.ProductStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductStocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductStocks
  **/
  _count?: true | ProductStockCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductStockAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductStockSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductStockMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductStockMaxAggregateInputType
}

export type GetProductStockAggregateType<T extends ProductStockAggregateArgs> = {
      [P in keyof T & keyof AggregateProductStock]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductStock[P]>
    : Prisma.GetScalarType<T[P], AggregateProductStock[P]>
}




export type ProductStockGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductStockWhereInput
  orderBy?: Prisma.ProductStockOrderByWithAggregationInput | Prisma.ProductStockOrderByWithAggregationInput[]
  by: Prisma.ProductStockScalarFieldEnum[] | Prisma.ProductStockScalarFieldEnum
  having?: Prisma.ProductStockScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductStockCountAggregateInputType | true
  _avg?: ProductStockAvgAggregateInputType
  _sum?: ProductStockSumAggregateInputType
  _min?: ProductStockMinAggregateInputType
  _max?: ProductStockMaxAggregateInputType
}

export type ProductStockGroupByOutputType = {
  id: string
  productId: string
  quantity: number
  batchNumber: string | null
  _count: ProductStockCountAggregateOutputType | null
  _avg: ProductStockAvgAggregateOutputType | null
  _sum: ProductStockSumAggregateOutputType | null
  _min: ProductStockMinAggregateOutputType | null
  _max: ProductStockMaxAggregateOutputType | null
}

type GetProductStockGroupByPayload<T extends ProductStockGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductStockGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductStockGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductStockGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductStockGroupByOutputType[P]>
      }
    >
  >



export type ProductStockWhereInput = {
  AND?: Prisma.ProductStockWhereInput | Prisma.ProductStockWhereInput[]
  OR?: Prisma.ProductStockWhereInput[]
  NOT?: Prisma.ProductStockWhereInput | Prisma.ProductStockWhereInput[]
  id?: Prisma.StringFilter<"ProductStock"> | string
  productId?: Prisma.StringFilter<"ProductStock"> | string
  quantity?: Prisma.IntFilter<"ProductStock"> | number
  batchNumber?: Prisma.StringNullableFilter<"ProductStock"> | string | null
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type ProductStockOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
}

export type ProductStockWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductStockWhereInput | Prisma.ProductStockWhereInput[]
  OR?: Prisma.ProductStockWhereInput[]
  NOT?: Prisma.ProductStockWhereInput | Prisma.ProductStockWhereInput[]
  productId?: Prisma.StringFilter<"ProductStock"> | string
  quantity?: Prisma.IntFilter<"ProductStock"> | number
  batchNumber?: Prisma.StringNullableFilter<"ProductStock"> | string | null
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type ProductStockOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ProductStockCountOrderByAggregateInput
  _avg?: Prisma.ProductStockAvgOrderByAggregateInput
  _max?: Prisma.ProductStockMaxOrderByAggregateInput
  _min?: Prisma.ProductStockMinOrderByAggregateInput
  _sum?: Prisma.ProductStockSumOrderByAggregateInput
}

export type ProductStockScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductStockScalarWhereWithAggregatesInput | Prisma.ProductStockScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductStockScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductStockScalarWhereWithAggregatesInput | Prisma.ProductStockScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductStock"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductStock"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"ProductStock"> | number
  batchNumber?: Prisma.StringNullableWithAggregatesFilter<"ProductStock"> | string | null
}

export type ProductStockCreateInput = {
  id?: string
  quantity: number
  batchNumber?: string | null
  product: Prisma.ProductCreateNestedOneWithoutStockItemsInput
}

export type ProductStockUncheckedCreateInput = {
  id?: string
  productId: string
  quantity: number
  batchNumber?: string | null
}

export type ProductStockUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  product?: Prisma.ProductUpdateOneRequiredWithoutStockItemsNestedInput
}

export type ProductStockUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ProductStockCreateManyInput = {
  id?: string
  productId: string
  quantity: number
  batchNumber?: string | null
}

export type ProductStockUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ProductStockUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ProductStockListRelationFilter = {
  every?: Prisma.ProductStockWhereInput
  some?: Prisma.ProductStockWhereInput
  none?: Prisma.ProductStockWhereInput
}

export type ProductStockOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProductStockCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrder
}

export type ProductStockAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type ProductStockMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrder
}

export type ProductStockMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  batchNumber?: Prisma.SortOrder
}

export type ProductStockSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type ProductStockCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductStockCreateWithoutProductInput, Prisma.ProductStockUncheckedCreateWithoutProductInput> | Prisma.ProductStockCreateWithoutProductInput[] | Prisma.ProductStockUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductStockCreateOrConnectWithoutProductInput | Prisma.ProductStockCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductStockCreateManyProductInputEnvelope
  connect?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
}

export type ProductStockUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductStockCreateWithoutProductInput, Prisma.ProductStockUncheckedCreateWithoutProductInput> | Prisma.ProductStockCreateWithoutProductInput[] | Prisma.ProductStockUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductStockCreateOrConnectWithoutProductInput | Prisma.ProductStockCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.ProductStockCreateManyProductInputEnvelope
  connect?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
}

export type ProductStockUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductStockCreateWithoutProductInput, Prisma.ProductStockUncheckedCreateWithoutProductInput> | Prisma.ProductStockCreateWithoutProductInput[] | Prisma.ProductStockUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductStockCreateOrConnectWithoutProductInput | Prisma.ProductStockCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductStockUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductStockUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductStockCreateManyProductInputEnvelope
  set?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  disconnect?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  delete?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  connect?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  update?: Prisma.ProductStockUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductStockUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductStockUpdateManyWithWhereWithoutProductInput | Prisma.ProductStockUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductStockScalarWhereInput | Prisma.ProductStockScalarWhereInput[]
}

export type ProductStockUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductStockCreateWithoutProductInput, Prisma.ProductStockUncheckedCreateWithoutProductInput> | Prisma.ProductStockCreateWithoutProductInput[] | Prisma.ProductStockUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.ProductStockCreateOrConnectWithoutProductInput | Prisma.ProductStockCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.ProductStockUpsertWithWhereUniqueWithoutProductInput | Prisma.ProductStockUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.ProductStockCreateManyProductInputEnvelope
  set?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  disconnect?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  delete?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  connect?: Prisma.ProductStockWhereUniqueInput | Prisma.ProductStockWhereUniqueInput[]
  update?: Prisma.ProductStockUpdateWithWhereUniqueWithoutProductInput | Prisma.ProductStockUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.ProductStockUpdateManyWithWhereWithoutProductInput | Prisma.ProductStockUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.ProductStockScalarWhereInput | Prisma.ProductStockScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ProductStockCreateWithoutProductInput = {
  id?: string
  quantity: number
  batchNumber?: string | null
}

export type ProductStockUncheckedCreateWithoutProductInput = {
  id?: string
  quantity: number
  batchNumber?: string | null
}

export type ProductStockCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductStockWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductStockCreateWithoutProductInput, Prisma.ProductStockUncheckedCreateWithoutProductInput>
}

export type ProductStockCreateManyProductInputEnvelope = {
  data: Prisma.ProductStockCreateManyProductInput | Prisma.ProductStockCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type ProductStockUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductStockWhereUniqueInput
  update: Prisma.XOR<Prisma.ProductStockUpdateWithoutProductInput, Prisma.ProductStockUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductStockCreateWithoutProductInput, Prisma.ProductStockUncheckedCreateWithoutProductInput>
}

export type ProductStockUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.ProductStockWhereUniqueInput
  data: Prisma.XOR<Prisma.ProductStockUpdateWithoutProductInput, Prisma.ProductStockUncheckedUpdateWithoutProductInput>
}

export type ProductStockUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.ProductStockScalarWhereInput
  data: Prisma.XOR<Prisma.ProductStockUpdateManyMutationInput, Prisma.ProductStockUncheckedUpdateManyWithoutProductInput>
}

export type ProductStockScalarWhereInput = {
  AND?: Prisma.ProductStockScalarWhereInput | Prisma.ProductStockScalarWhereInput[]
  OR?: Prisma.ProductStockScalarWhereInput[]
  NOT?: Prisma.ProductStockScalarWhereInput | Prisma.ProductStockScalarWhereInput[]
  id?: Prisma.StringFilter<"ProductStock"> | string
  productId?: Prisma.StringFilter<"ProductStock"> | string
  quantity?: Prisma.IntFilter<"ProductStock"> | number
  batchNumber?: Prisma.StringNullableFilter<"ProductStock"> | string | null
}

export type ProductStockCreateManyProductInput = {
  id?: string
  quantity: number
  batchNumber?: string | null
}

export type ProductStockUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ProductStockUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type ProductStockUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  batchNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type ProductStockSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  quantity?: boolean
  batchNumber?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStock"]>

export type ProductStockSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  quantity?: boolean
  batchNumber?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStock"]>

export type ProductStockSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  quantity?: boolean
  batchNumber?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productStock"]>

export type ProductStockSelectScalar = {
  id?: boolean
  productId?: boolean
  quantity?: boolean
  batchNumber?: boolean
}

export type ProductStockOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "quantity" | "batchNumber", ExtArgs["result"]["productStock"]>
export type ProductStockInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductStockIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductStockIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductStockPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductStock"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    quantity: number
    batchNumber: string | null
  }, ExtArgs["result"]["productStock"]>
  composites: {}
}

export type ProductStockGetPayload<S extends boolean | null | undefined | ProductStockDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductStockPayload, S>

export type ProductStockCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductStockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductStockCountAggregateInputType | true
  }

export interface ProductStockDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductStock'], meta: { name: 'ProductStock' } }
  /**
   * Find zero or one ProductStock that matches the filter.
   * @param {ProductStockFindUniqueArgs} args - Arguments to find a ProductStock
   * @example
   * // Get one ProductStock
   * const productStock = await prisma.productStock.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductStockFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductStockFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductStock that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductStockFindUniqueOrThrowArgs} args - Arguments to find a ProductStock
   * @example
   * // Get one ProductStock
   * const productStock = await prisma.productStock.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductStockFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductStockFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductStock that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStockFindFirstArgs} args - Arguments to find a ProductStock
   * @example
   * // Get one ProductStock
   * const productStock = await prisma.productStock.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductStockFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductStockFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductStock that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStockFindFirstOrThrowArgs} args - Arguments to find a ProductStock
   * @example
   * // Get one ProductStock
   * const productStock = await prisma.productStock.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductStockFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductStockFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductStocks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStockFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductStocks
   * const productStocks = await prisma.productStock.findMany()
   * 
   * // Get first 10 ProductStocks
   * const productStocks = await prisma.productStock.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productStockWithIdOnly = await prisma.productStock.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductStockFindManyArgs>(args?: Prisma.SelectSubset<T, ProductStockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductStock.
   * @param {ProductStockCreateArgs} args - Arguments to create a ProductStock.
   * @example
   * // Create one ProductStock
   * const ProductStock = await prisma.productStock.create({
   *   data: {
   *     // ... data to create a ProductStock
   *   }
   * })
   * 
   */
  create<T extends ProductStockCreateArgs>(args: Prisma.SelectSubset<T, ProductStockCreateArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductStocks.
   * @param {ProductStockCreateManyArgs} args - Arguments to create many ProductStocks.
   * @example
   * // Create many ProductStocks
   * const productStock = await prisma.productStock.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductStockCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductStockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductStocks and returns the data saved in the database.
   * @param {ProductStockCreateManyAndReturnArgs} args - Arguments to create many ProductStocks.
   * @example
   * // Create many ProductStocks
   * const productStock = await prisma.productStock.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductStocks and only return the `id`
   * const productStockWithIdOnly = await prisma.productStock.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductStockCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductStockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductStock.
   * @param {ProductStockDeleteArgs} args - Arguments to delete one ProductStock.
   * @example
   * // Delete one ProductStock
   * const ProductStock = await prisma.productStock.delete({
   *   where: {
   *     // ... filter to delete one ProductStock
   *   }
   * })
   * 
   */
  delete<T extends ProductStockDeleteArgs>(args: Prisma.SelectSubset<T, ProductStockDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductStock.
   * @param {ProductStockUpdateArgs} args - Arguments to update one ProductStock.
   * @example
   * // Update one ProductStock
   * const productStock = await prisma.productStock.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductStockUpdateArgs>(args: Prisma.SelectSubset<T, ProductStockUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductStocks.
   * @param {ProductStockDeleteManyArgs} args - Arguments to filter ProductStocks to delete.
   * @example
   * // Delete a few ProductStocks
   * const { count } = await prisma.productStock.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductStockDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductStockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductStocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStockUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductStocks
   * const productStock = await prisma.productStock.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductStockUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductStockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductStocks and returns the data updated in the database.
   * @param {ProductStockUpdateManyAndReturnArgs} args - Arguments to update many ProductStocks.
   * @example
   * // Update many ProductStocks
   * const productStock = await prisma.productStock.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductStocks and only return the `id`
   * const productStockWithIdOnly = await prisma.productStock.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductStockUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductStockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductStock.
   * @param {ProductStockUpsertArgs} args - Arguments to update or create a ProductStock.
   * @example
   * // Update or create a ProductStock
   * const productStock = await prisma.productStock.upsert({
   *   create: {
   *     // ... data to create a ProductStock
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductStock we want to update
   *   }
   * })
   */
  upsert<T extends ProductStockUpsertArgs>(args: Prisma.SelectSubset<T, ProductStockUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductStockClient<runtime.Types.Result.GetResult<Prisma.$ProductStockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductStocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStockCountArgs} args - Arguments to filter ProductStocks to count.
   * @example
   * // Count the number of ProductStocks
   * const count = await prisma.productStock.count({
   *   where: {
   *     // ... the filter for the ProductStocks we want to count
   *   }
   * })
  **/
  count<T extends ProductStockCountArgs>(
    args?: Prisma.Subset<T, ProductStockCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductStockCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductStock.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductStockAggregateArgs>(args: Prisma.Subset<T, ProductStockAggregateArgs>): Prisma.PrismaPromise<GetProductStockAggregateType<T>>

  /**
   * Group by ProductStock.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductStockGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductStockGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductStockGroupByArgs['orderBy'] }
      : { orderBy?: ProductStockGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductStockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductStock model
 */
readonly fields: ProductStockFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductStock.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductStockClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductStock model
 */
export interface ProductStockFieldRefs {
  readonly id: Prisma.FieldRef<"ProductStock", 'String'>
  readonly productId: Prisma.FieldRef<"ProductStock", 'String'>
  readonly quantity: Prisma.FieldRef<"ProductStock", 'Int'>
  readonly batchNumber: Prisma.FieldRef<"ProductStock", 'String'>
}
    

// Custom InputTypes
/**
 * ProductStock findUnique
 */
export type ProductStockFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * Filter, which ProductStock to fetch.
   */
  where: Prisma.ProductStockWhereUniqueInput
}

/**
 * ProductStock findUniqueOrThrow
 */
export type ProductStockFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * Filter, which ProductStock to fetch.
   */
  where: Prisma.ProductStockWhereUniqueInput
}

/**
 * ProductStock findFirst
 */
export type ProductStockFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * Filter, which ProductStock to fetch.
   */
  where?: Prisma.ProductStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductStocks to fetch.
   */
  orderBy?: Prisma.ProductStockOrderByWithRelationInput | Prisma.ProductStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductStocks.
   */
  cursor?: Prisma.ProductStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductStocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductStocks.
   */
  distinct?: Prisma.ProductStockScalarFieldEnum | Prisma.ProductStockScalarFieldEnum[]
}

/**
 * ProductStock findFirstOrThrow
 */
export type ProductStockFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * Filter, which ProductStock to fetch.
   */
  where?: Prisma.ProductStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductStocks to fetch.
   */
  orderBy?: Prisma.ProductStockOrderByWithRelationInput | Prisma.ProductStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductStocks.
   */
  cursor?: Prisma.ProductStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductStocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductStocks.
   */
  distinct?: Prisma.ProductStockScalarFieldEnum | Prisma.ProductStockScalarFieldEnum[]
}

/**
 * ProductStock findMany
 */
export type ProductStockFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * Filter, which ProductStocks to fetch.
   */
  where?: Prisma.ProductStockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductStocks to fetch.
   */
  orderBy?: Prisma.ProductStockOrderByWithRelationInput | Prisma.ProductStockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductStocks.
   */
  cursor?: Prisma.ProductStockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductStocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductStocks.
   */
  skip?: number
  distinct?: Prisma.ProductStockScalarFieldEnum | Prisma.ProductStockScalarFieldEnum[]
}

/**
 * ProductStock create
 */
export type ProductStockCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductStock.
   */
  data: Prisma.XOR<Prisma.ProductStockCreateInput, Prisma.ProductStockUncheckedCreateInput>
}

/**
 * ProductStock createMany
 */
export type ProductStockCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductStocks.
   */
  data: Prisma.ProductStockCreateManyInput | Prisma.ProductStockCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductStock createManyAndReturn
 */
export type ProductStockCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * The data used to create many ProductStocks.
   */
  data: Prisma.ProductStockCreateManyInput | Prisma.ProductStockCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductStock update
 */
export type ProductStockUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductStock.
   */
  data: Prisma.XOR<Prisma.ProductStockUpdateInput, Prisma.ProductStockUncheckedUpdateInput>
  /**
   * Choose, which ProductStock to update.
   */
  where: Prisma.ProductStockWhereUniqueInput
}

/**
 * ProductStock updateMany
 */
export type ProductStockUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductStocks.
   */
  data: Prisma.XOR<Prisma.ProductStockUpdateManyMutationInput, Prisma.ProductStockUncheckedUpdateManyInput>
  /**
   * Filter which ProductStocks to update
   */
  where?: Prisma.ProductStockWhereInput
  /**
   * Limit how many ProductStocks to update.
   */
  limit?: number
}

/**
 * ProductStock updateManyAndReturn
 */
export type ProductStockUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * The data used to update ProductStocks.
   */
  data: Prisma.XOR<Prisma.ProductStockUpdateManyMutationInput, Prisma.ProductStockUncheckedUpdateManyInput>
  /**
   * Filter which ProductStocks to update
   */
  where?: Prisma.ProductStockWhereInput
  /**
   * Limit how many ProductStocks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductStock upsert
 */
export type ProductStockUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductStock to update in case it exists.
   */
  where: Prisma.ProductStockWhereUniqueInput
  /**
   * In case the ProductStock found by the `where` argument doesn't exist, create a new ProductStock with this data.
   */
  create: Prisma.XOR<Prisma.ProductStockCreateInput, Prisma.ProductStockUncheckedCreateInput>
  /**
   * In case the ProductStock was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductStockUpdateInput, Prisma.ProductStockUncheckedUpdateInput>
}

/**
 * ProductStock delete
 */
export type ProductStockDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
  /**
   * Filter which ProductStock to delete.
   */
  where: Prisma.ProductStockWhereUniqueInput
}

/**
 * ProductStock deleteMany
 */
export type ProductStockDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductStocks to delete
   */
  where?: Prisma.ProductStockWhereInput
  /**
   * Limit how many ProductStocks to delete.
   */
  limit?: number
}

/**
 * ProductStock without action
 */
export type ProductStockDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductStock
   */
  select?: Prisma.ProductStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductStock
   */
  omit?: Prisma.ProductStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductStockInclude<ExtArgs> | null
}
