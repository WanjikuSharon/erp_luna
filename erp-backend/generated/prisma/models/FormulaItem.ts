
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FormulaItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model FormulaItem
 * 
 */
export type FormulaItemModel = runtime.Types.Result.DefaultSelection<Prisma.$FormulaItemPayload>

export type AggregateFormulaItem = {
  _count: FormulaItemCountAggregateOutputType | null
  _avg: FormulaItemAvgAggregateOutputType | null
  _sum: FormulaItemSumAggregateOutputType | null
  _min: FormulaItemMinAggregateOutputType | null
  _max: FormulaItemMaxAggregateOutputType | null
}

export type FormulaItemAvgAggregateOutputType = {
  quantityNeeded: runtime.Decimal | null
}

export type FormulaItemSumAggregateOutputType = {
  quantityNeeded: runtime.Decimal | null
}

export type FormulaItemMinAggregateOutputType = {
  id: string | null
  formulaId: string | null
  rawMaterialId: string | null
  quantityNeeded: runtime.Decimal | null
}

export type FormulaItemMaxAggregateOutputType = {
  id: string | null
  formulaId: string | null
  rawMaterialId: string | null
  quantityNeeded: runtime.Decimal | null
}

export type FormulaItemCountAggregateOutputType = {
  id: number
  formulaId: number
  rawMaterialId: number
  quantityNeeded: number
  _all: number
}


export type FormulaItemAvgAggregateInputType = {
  quantityNeeded?: true
}

export type FormulaItemSumAggregateInputType = {
  quantityNeeded?: true
}

export type FormulaItemMinAggregateInputType = {
  id?: true
  formulaId?: true
  rawMaterialId?: true
  quantityNeeded?: true
}

export type FormulaItemMaxAggregateInputType = {
  id?: true
  formulaId?: true
  rawMaterialId?: true
  quantityNeeded?: true
}

export type FormulaItemCountAggregateInputType = {
  id?: true
  formulaId?: true
  rawMaterialId?: true
  quantityNeeded?: true
  _all?: true
}

export type FormulaItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormulaItem to aggregate.
   */
  where?: Prisma.FormulaItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormulaItems to fetch.
   */
  orderBy?: Prisma.FormulaItemOrderByWithRelationInput | Prisma.FormulaItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FormulaItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormulaItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormulaItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FormulaItems
  **/
  _count?: true | FormulaItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FormulaItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FormulaItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FormulaItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FormulaItemMaxAggregateInputType
}

export type GetFormulaItemAggregateType<T extends FormulaItemAggregateArgs> = {
      [P in keyof T & keyof AggregateFormulaItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFormulaItem[P]>
    : Prisma.GetScalarType<T[P], AggregateFormulaItem[P]>
}




export type FormulaItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormulaItemWhereInput
  orderBy?: Prisma.FormulaItemOrderByWithAggregationInput | Prisma.FormulaItemOrderByWithAggregationInput[]
  by: Prisma.FormulaItemScalarFieldEnum[] | Prisma.FormulaItemScalarFieldEnum
  having?: Prisma.FormulaItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FormulaItemCountAggregateInputType | true
  _avg?: FormulaItemAvgAggregateInputType
  _sum?: FormulaItemSumAggregateInputType
  _min?: FormulaItemMinAggregateInputType
  _max?: FormulaItemMaxAggregateInputType
}

export type FormulaItemGroupByOutputType = {
  id: string
  formulaId: string
  rawMaterialId: string
  quantityNeeded: runtime.Decimal
  _count: FormulaItemCountAggregateOutputType | null
  _avg: FormulaItemAvgAggregateOutputType | null
  _sum: FormulaItemSumAggregateOutputType | null
  _min: FormulaItemMinAggregateOutputType | null
  _max: FormulaItemMaxAggregateOutputType | null
}

type GetFormulaItemGroupByPayload<T extends FormulaItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FormulaItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FormulaItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FormulaItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FormulaItemGroupByOutputType[P]>
      }
    >
  >



export type FormulaItemWhereInput = {
  AND?: Prisma.FormulaItemWhereInput | Prisma.FormulaItemWhereInput[]
  OR?: Prisma.FormulaItemWhereInput[]
  NOT?: Prisma.FormulaItemWhereInput | Prisma.FormulaItemWhereInput[]
  id?: Prisma.StringFilter<"FormulaItem"> | string
  formulaId?: Prisma.StringFilter<"FormulaItem"> | string
  rawMaterialId?: Prisma.StringFilter<"FormulaItem"> | string
  quantityNeeded?: Prisma.DecimalFilter<"FormulaItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  formula?: Prisma.XOR<Prisma.ProductFormulaScalarRelationFilter, Prisma.ProductFormulaWhereInput>
  rawMaterial?: Prisma.XOR<Prisma.RawMaterialScalarRelationFilter, Prisma.RawMaterialWhereInput>
}

export type FormulaItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  formulaId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantityNeeded?: Prisma.SortOrder
  formula?: Prisma.ProductFormulaOrderByWithRelationInput
  rawMaterial?: Prisma.RawMaterialOrderByWithRelationInput
}

export type FormulaItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FormulaItemWhereInput | Prisma.FormulaItemWhereInput[]
  OR?: Prisma.FormulaItemWhereInput[]
  NOT?: Prisma.FormulaItemWhereInput | Prisma.FormulaItemWhereInput[]
  formulaId?: Prisma.StringFilter<"FormulaItem"> | string
  rawMaterialId?: Prisma.StringFilter<"FormulaItem"> | string
  quantityNeeded?: Prisma.DecimalFilter<"FormulaItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  formula?: Prisma.XOR<Prisma.ProductFormulaScalarRelationFilter, Prisma.ProductFormulaWhereInput>
  rawMaterial?: Prisma.XOR<Prisma.RawMaterialScalarRelationFilter, Prisma.RawMaterialWhereInput>
}, "id">

export type FormulaItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  formulaId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantityNeeded?: Prisma.SortOrder
  _count?: Prisma.FormulaItemCountOrderByAggregateInput
  _avg?: Prisma.FormulaItemAvgOrderByAggregateInput
  _max?: Prisma.FormulaItemMaxOrderByAggregateInput
  _min?: Prisma.FormulaItemMinOrderByAggregateInput
  _sum?: Prisma.FormulaItemSumOrderByAggregateInput
}

export type FormulaItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.FormulaItemScalarWhereWithAggregatesInput | Prisma.FormulaItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.FormulaItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FormulaItemScalarWhereWithAggregatesInput | Prisma.FormulaItemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FormulaItem"> | string
  formulaId?: Prisma.StringWithAggregatesFilter<"FormulaItem"> | string
  rawMaterialId?: Prisma.StringWithAggregatesFilter<"FormulaItem"> | string
  quantityNeeded?: Prisma.DecimalWithAggregatesFilter<"FormulaItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemCreateInput = {
  id?: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
  formula: Prisma.ProductFormulaCreateNestedOneWithoutItemsInput
  rawMaterial: Prisma.RawMaterialCreateNestedOneWithoutFormulaItemsInput
}

export type FormulaItemUncheckedCreateInput = {
  id?: string
  formulaId: string
  rawMaterialId: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  formula?: Prisma.ProductFormulaUpdateOneRequiredWithoutItemsNestedInput
  rawMaterial?: Prisma.RawMaterialUpdateOneRequiredWithoutFormulaItemsNestedInput
}

export type FormulaItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formulaId?: Prisma.StringFieldUpdateOperationsInput | string
  rawMaterialId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemCreateManyInput = {
  id?: string
  formulaId: string
  rawMaterialId: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formulaId?: Prisma.StringFieldUpdateOperationsInput | string
  rawMaterialId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemListRelationFilter = {
  every?: Prisma.FormulaItemWhereInput
  some?: Prisma.FormulaItemWhereInput
  none?: Prisma.FormulaItemWhereInput
}

export type FormulaItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FormulaItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formulaId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantityNeeded?: Prisma.SortOrder
}

export type FormulaItemAvgOrderByAggregateInput = {
  quantityNeeded?: Prisma.SortOrder
}

export type FormulaItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formulaId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantityNeeded?: Prisma.SortOrder
}

export type FormulaItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  formulaId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantityNeeded?: Prisma.SortOrder
}

export type FormulaItemSumOrderByAggregateInput = {
  quantityNeeded?: Prisma.SortOrder
}

export type FormulaItemCreateNestedManyWithoutRawMaterialInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput> | Prisma.FormulaItemCreateWithoutRawMaterialInput[] | Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput | Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput[]
  createMany?: Prisma.FormulaItemCreateManyRawMaterialInputEnvelope
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
}

export type FormulaItemUncheckedCreateNestedManyWithoutRawMaterialInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput> | Prisma.FormulaItemCreateWithoutRawMaterialInput[] | Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput | Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput[]
  createMany?: Prisma.FormulaItemCreateManyRawMaterialInputEnvelope
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
}

export type FormulaItemUpdateManyWithoutRawMaterialNestedInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput> | Prisma.FormulaItemCreateWithoutRawMaterialInput[] | Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput | Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput[]
  upsert?: Prisma.FormulaItemUpsertWithWhereUniqueWithoutRawMaterialInput | Prisma.FormulaItemUpsertWithWhereUniqueWithoutRawMaterialInput[]
  createMany?: Prisma.FormulaItemCreateManyRawMaterialInputEnvelope
  set?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  disconnect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  delete?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  update?: Prisma.FormulaItemUpdateWithWhereUniqueWithoutRawMaterialInput | Prisma.FormulaItemUpdateWithWhereUniqueWithoutRawMaterialInput[]
  updateMany?: Prisma.FormulaItemUpdateManyWithWhereWithoutRawMaterialInput | Prisma.FormulaItemUpdateManyWithWhereWithoutRawMaterialInput[]
  deleteMany?: Prisma.FormulaItemScalarWhereInput | Prisma.FormulaItemScalarWhereInput[]
}

export type FormulaItemUncheckedUpdateManyWithoutRawMaterialNestedInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput> | Prisma.FormulaItemCreateWithoutRawMaterialInput[] | Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput | Prisma.FormulaItemCreateOrConnectWithoutRawMaterialInput[]
  upsert?: Prisma.FormulaItemUpsertWithWhereUniqueWithoutRawMaterialInput | Prisma.FormulaItemUpsertWithWhereUniqueWithoutRawMaterialInput[]
  createMany?: Prisma.FormulaItemCreateManyRawMaterialInputEnvelope
  set?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  disconnect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  delete?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  update?: Prisma.FormulaItemUpdateWithWhereUniqueWithoutRawMaterialInput | Prisma.FormulaItemUpdateWithWhereUniqueWithoutRawMaterialInput[]
  updateMany?: Prisma.FormulaItemUpdateManyWithWhereWithoutRawMaterialInput | Prisma.FormulaItemUpdateManyWithWhereWithoutRawMaterialInput[]
  deleteMany?: Prisma.FormulaItemScalarWhereInput | Prisma.FormulaItemScalarWhereInput[]
}

export type FormulaItemCreateNestedManyWithoutFormulaInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutFormulaInput, Prisma.FormulaItemUncheckedCreateWithoutFormulaInput> | Prisma.FormulaItemCreateWithoutFormulaInput[] | Prisma.FormulaItemUncheckedCreateWithoutFormulaInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutFormulaInput | Prisma.FormulaItemCreateOrConnectWithoutFormulaInput[]
  createMany?: Prisma.FormulaItemCreateManyFormulaInputEnvelope
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
}

export type FormulaItemUncheckedCreateNestedManyWithoutFormulaInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutFormulaInput, Prisma.FormulaItemUncheckedCreateWithoutFormulaInput> | Prisma.FormulaItemCreateWithoutFormulaInput[] | Prisma.FormulaItemUncheckedCreateWithoutFormulaInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutFormulaInput | Prisma.FormulaItemCreateOrConnectWithoutFormulaInput[]
  createMany?: Prisma.FormulaItemCreateManyFormulaInputEnvelope
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
}

export type FormulaItemUpdateManyWithoutFormulaNestedInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutFormulaInput, Prisma.FormulaItemUncheckedCreateWithoutFormulaInput> | Prisma.FormulaItemCreateWithoutFormulaInput[] | Prisma.FormulaItemUncheckedCreateWithoutFormulaInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutFormulaInput | Prisma.FormulaItemCreateOrConnectWithoutFormulaInput[]
  upsert?: Prisma.FormulaItemUpsertWithWhereUniqueWithoutFormulaInput | Prisma.FormulaItemUpsertWithWhereUniqueWithoutFormulaInput[]
  createMany?: Prisma.FormulaItemCreateManyFormulaInputEnvelope
  set?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  disconnect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  delete?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  update?: Prisma.FormulaItemUpdateWithWhereUniqueWithoutFormulaInput | Prisma.FormulaItemUpdateWithWhereUniqueWithoutFormulaInput[]
  updateMany?: Prisma.FormulaItemUpdateManyWithWhereWithoutFormulaInput | Prisma.FormulaItemUpdateManyWithWhereWithoutFormulaInput[]
  deleteMany?: Prisma.FormulaItemScalarWhereInput | Prisma.FormulaItemScalarWhereInput[]
}

export type FormulaItemUncheckedUpdateManyWithoutFormulaNestedInput = {
  create?: Prisma.XOR<Prisma.FormulaItemCreateWithoutFormulaInput, Prisma.FormulaItemUncheckedCreateWithoutFormulaInput> | Prisma.FormulaItemCreateWithoutFormulaInput[] | Prisma.FormulaItemUncheckedCreateWithoutFormulaInput[]
  connectOrCreate?: Prisma.FormulaItemCreateOrConnectWithoutFormulaInput | Prisma.FormulaItemCreateOrConnectWithoutFormulaInput[]
  upsert?: Prisma.FormulaItemUpsertWithWhereUniqueWithoutFormulaInput | Prisma.FormulaItemUpsertWithWhereUniqueWithoutFormulaInput[]
  createMany?: Prisma.FormulaItemCreateManyFormulaInputEnvelope
  set?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  disconnect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  delete?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  connect?: Prisma.FormulaItemWhereUniqueInput | Prisma.FormulaItemWhereUniqueInput[]
  update?: Prisma.FormulaItemUpdateWithWhereUniqueWithoutFormulaInput | Prisma.FormulaItemUpdateWithWhereUniqueWithoutFormulaInput[]
  updateMany?: Prisma.FormulaItemUpdateManyWithWhereWithoutFormulaInput | Prisma.FormulaItemUpdateManyWithWhereWithoutFormulaInput[]
  deleteMany?: Prisma.FormulaItemScalarWhereInput | Prisma.FormulaItemScalarWhereInput[]
}

export type FormulaItemCreateWithoutRawMaterialInput = {
  id?: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
  formula: Prisma.ProductFormulaCreateNestedOneWithoutItemsInput
}

export type FormulaItemUncheckedCreateWithoutRawMaterialInput = {
  id?: string
  formulaId: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemCreateOrConnectWithoutRawMaterialInput = {
  where: Prisma.FormulaItemWhereUniqueInput
  create: Prisma.XOR<Prisma.FormulaItemCreateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput>
}

export type FormulaItemCreateManyRawMaterialInputEnvelope = {
  data: Prisma.FormulaItemCreateManyRawMaterialInput | Prisma.FormulaItemCreateManyRawMaterialInput[]
  skipDuplicates?: boolean
}

export type FormulaItemUpsertWithWhereUniqueWithoutRawMaterialInput = {
  where: Prisma.FormulaItemWhereUniqueInput
  update: Prisma.XOR<Prisma.FormulaItemUpdateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedUpdateWithoutRawMaterialInput>
  create: Prisma.XOR<Prisma.FormulaItemCreateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedCreateWithoutRawMaterialInput>
}

export type FormulaItemUpdateWithWhereUniqueWithoutRawMaterialInput = {
  where: Prisma.FormulaItemWhereUniqueInput
  data: Prisma.XOR<Prisma.FormulaItemUpdateWithoutRawMaterialInput, Prisma.FormulaItemUncheckedUpdateWithoutRawMaterialInput>
}

export type FormulaItemUpdateManyWithWhereWithoutRawMaterialInput = {
  where: Prisma.FormulaItemScalarWhereInput
  data: Prisma.XOR<Prisma.FormulaItemUpdateManyMutationInput, Prisma.FormulaItemUncheckedUpdateManyWithoutRawMaterialInput>
}

export type FormulaItemScalarWhereInput = {
  AND?: Prisma.FormulaItemScalarWhereInput | Prisma.FormulaItemScalarWhereInput[]
  OR?: Prisma.FormulaItemScalarWhereInput[]
  NOT?: Prisma.FormulaItemScalarWhereInput | Prisma.FormulaItemScalarWhereInput[]
  id?: Prisma.StringFilter<"FormulaItem"> | string
  formulaId?: Prisma.StringFilter<"FormulaItem"> | string
  rawMaterialId?: Prisma.StringFilter<"FormulaItem"> | string
  quantityNeeded?: Prisma.DecimalFilter<"FormulaItem"> | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemCreateWithoutFormulaInput = {
  id?: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
  rawMaterial: Prisma.RawMaterialCreateNestedOneWithoutFormulaItemsInput
}

export type FormulaItemUncheckedCreateWithoutFormulaInput = {
  id?: string
  rawMaterialId: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemCreateOrConnectWithoutFormulaInput = {
  where: Prisma.FormulaItemWhereUniqueInput
  create: Prisma.XOR<Prisma.FormulaItemCreateWithoutFormulaInput, Prisma.FormulaItemUncheckedCreateWithoutFormulaInput>
}

export type FormulaItemCreateManyFormulaInputEnvelope = {
  data: Prisma.FormulaItemCreateManyFormulaInput | Prisma.FormulaItemCreateManyFormulaInput[]
  skipDuplicates?: boolean
}

export type FormulaItemUpsertWithWhereUniqueWithoutFormulaInput = {
  where: Prisma.FormulaItemWhereUniqueInput
  update: Prisma.XOR<Prisma.FormulaItemUpdateWithoutFormulaInput, Prisma.FormulaItemUncheckedUpdateWithoutFormulaInput>
  create: Prisma.XOR<Prisma.FormulaItemCreateWithoutFormulaInput, Prisma.FormulaItemUncheckedCreateWithoutFormulaInput>
}

export type FormulaItemUpdateWithWhereUniqueWithoutFormulaInput = {
  where: Prisma.FormulaItemWhereUniqueInput
  data: Prisma.XOR<Prisma.FormulaItemUpdateWithoutFormulaInput, Prisma.FormulaItemUncheckedUpdateWithoutFormulaInput>
}

export type FormulaItemUpdateManyWithWhereWithoutFormulaInput = {
  where: Prisma.FormulaItemScalarWhereInput
  data: Prisma.XOR<Prisma.FormulaItemUpdateManyMutationInput, Prisma.FormulaItemUncheckedUpdateManyWithoutFormulaInput>
}

export type FormulaItemCreateManyRawMaterialInput = {
  id?: string
  formulaId: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemUpdateWithoutRawMaterialInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  formula?: Prisma.ProductFormulaUpdateOneRequiredWithoutItemsNestedInput
}

export type FormulaItemUncheckedUpdateWithoutRawMaterialInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formulaId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemUncheckedUpdateManyWithoutRawMaterialInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  formulaId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemCreateManyFormulaInput = {
  id?: string
  rawMaterialId: string
  quantityNeeded: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemUpdateWithoutFormulaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  rawMaterial?: Prisma.RawMaterialUpdateOneRequiredWithoutFormulaItemsNestedInput
}

export type FormulaItemUncheckedUpdateWithoutFormulaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rawMaterialId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type FormulaItemUncheckedUpdateManyWithoutFormulaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  rawMaterialId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityNeeded?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
}



export type FormulaItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formulaId?: boolean
  rawMaterialId?: boolean
  quantityNeeded?: boolean
  formula?: boolean | Prisma.ProductFormulaDefaultArgs<ExtArgs>
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formulaItem"]>

export type FormulaItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formulaId?: boolean
  rawMaterialId?: boolean
  quantityNeeded?: boolean
  formula?: boolean | Prisma.ProductFormulaDefaultArgs<ExtArgs>
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formulaItem"]>

export type FormulaItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  formulaId?: boolean
  rawMaterialId?: boolean
  quantityNeeded?: boolean
  formula?: boolean | Prisma.ProductFormulaDefaultArgs<ExtArgs>
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}, ExtArgs["result"]["formulaItem"]>

export type FormulaItemSelectScalar = {
  id?: boolean
  formulaId?: boolean
  rawMaterialId?: boolean
  quantityNeeded?: boolean
}

export type FormulaItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "formulaId" | "rawMaterialId" | "quantityNeeded", ExtArgs["result"]["formulaItem"]>
export type FormulaItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  formula?: boolean | Prisma.ProductFormulaDefaultArgs<ExtArgs>
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}
export type FormulaItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  formula?: boolean | Prisma.ProductFormulaDefaultArgs<ExtArgs>
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}
export type FormulaItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  formula?: boolean | Prisma.ProductFormulaDefaultArgs<ExtArgs>
  rawMaterial?: boolean | Prisma.RawMaterialDefaultArgs<ExtArgs>
}

export type $FormulaItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FormulaItem"
  objects: {
    formula: Prisma.$ProductFormulaPayload<ExtArgs>
    rawMaterial: Prisma.$RawMaterialPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    formulaId: string
    rawMaterialId: string
    quantityNeeded: runtime.Decimal
  }, ExtArgs["result"]["formulaItem"]>
  composites: {}
}

export type FormulaItemGetPayload<S extends boolean | null | undefined | FormulaItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload, S>

export type FormulaItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FormulaItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FormulaItemCountAggregateInputType | true
  }

export interface FormulaItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormulaItem'], meta: { name: 'FormulaItem' } }
  /**
   * Find zero or one FormulaItem that matches the filter.
   * @param {FormulaItemFindUniqueArgs} args - Arguments to find a FormulaItem
   * @example
   * // Get one FormulaItem
   * const formulaItem = await prisma.formulaItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FormulaItemFindUniqueArgs>(args: Prisma.SelectSubset<T, FormulaItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FormulaItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FormulaItemFindUniqueOrThrowArgs} args - Arguments to find a FormulaItem
   * @example
   * // Get one FormulaItem
   * const formulaItem = await prisma.formulaItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FormulaItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FormulaItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormulaItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormulaItemFindFirstArgs} args - Arguments to find a FormulaItem
   * @example
   * // Get one FormulaItem
   * const formulaItem = await prisma.formulaItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FormulaItemFindFirstArgs>(args?: Prisma.SelectSubset<T, FormulaItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FormulaItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormulaItemFindFirstOrThrowArgs} args - Arguments to find a FormulaItem
   * @example
   * // Get one FormulaItem
   * const formulaItem = await prisma.formulaItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FormulaItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FormulaItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FormulaItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormulaItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FormulaItems
   * const formulaItems = await prisma.formulaItem.findMany()
   * 
   * // Get first 10 FormulaItems
   * const formulaItems = await prisma.formulaItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const formulaItemWithIdOnly = await prisma.formulaItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FormulaItemFindManyArgs>(args?: Prisma.SelectSubset<T, FormulaItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FormulaItem.
   * @param {FormulaItemCreateArgs} args - Arguments to create a FormulaItem.
   * @example
   * // Create one FormulaItem
   * const FormulaItem = await prisma.formulaItem.create({
   *   data: {
   *     // ... data to create a FormulaItem
   *   }
   * })
   * 
   */
  create<T extends FormulaItemCreateArgs>(args: Prisma.SelectSubset<T, FormulaItemCreateArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FormulaItems.
   * @param {FormulaItemCreateManyArgs} args - Arguments to create many FormulaItems.
   * @example
   * // Create many FormulaItems
   * const formulaItem = await prisma.formulaItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FormulaItemCreateManyArgs>(args?: Prisma.SelectSubset<T, FormulaItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FormulaItems and returns the data saved in the database.
   * @param {FormulaItemCreateManyAndReturnArgs} args - Arguments to create many FormulaItems.
   * @example
   * // Create many FormulaItems
   * const formulaItem = await prisma.formulaItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FormulaItems and only return the `id`
   * const formulaItemWithIdOnly = await prisma.formulaItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FormulaItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FormulaItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FormulaItem.
   * @param {FormulaItemDeleteArgs} args - Arguments to delete one FormulaItem.
   * @example
   * // Delete one FormulaItem
   * const FormulaItem = await prisma.formulaItem.delete({
   *   where: {
   *     // ... filter to delete one FormulaItem
   *   }
   * })
   * 
   */
  delete<T extends FormulaItemDeleteArgs>(args: Prisma.SelectSubset<T, FormulaItemDeleteArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FormulaItem.
   * @param {FormulaItemUpdateArgs} args - Arguments to update one FormulaItem.
   * @example
   * // Update one FormulaItem
   * const formulaItem = await prisma.formulaItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FormulaItemUpdateArgs>(args: Prisma.SelectSubset<T, FormulaItemUpdateArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FormulaItems.
   * @param {FormulaItemDeleteManyArgs} args - Arguments to filter FormulaItems to delete.
   * @example
   * // Delete a few FormulaItems
   * const { count } = await prisma.formulaItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FormulaItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, FormulaItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormulaItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormulaItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FormulaItems
   * const formulaItem = await prisma.formulaItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FormulaItemUpdateManyArgs>(args: Prisma.SelectSubset<T, FormulaItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FormulaItems and returns the data updated in the database.
   * @param {FormulaItemUpdateManyAndReturnArgs} args - Arguments to update many FormulaItems.
   * @example
   * // Update many FormulaItems
   * const formulaItem = await prisma.formulaItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FormulaItems and only return the `id`
   * const formulaItemWithIdOnly = await prisma.formulaItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FormulaItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FormulaItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FormulaItem.
   * @param {FormulaItemUpsertArgs} args - Arguments to update or create a FormulaItem.
   * @example
   * // Update or create a FormulaItem
   * const formulaItem = await prisma.formulaItem.upsert({
   *   create: {
   *     // ... data to create a FormulaItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FormulaItem we want to update
   *   }
   * })
   */
  upsert<T extends FormulaItemUpsertArgs>(args: Prisma.SelectSubset<T, FormulaItemUpsertArgs<ExtArgs>>): Prisma.Prisma__FormulaItemClient<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FormulaItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormulaItemCountArgs} args - Arguments to filter FormulaItems to count.
   * @example
   * // Count the number of FormulaItems
   * const count = await prisma.formulaItem.count({
   *   where: {
   *     // ... the filter for the FormulaItems we want to count
   *   }
   * })
  **/
  count<T extends FormulaItemCountArgs>(
    args?: Prisma.Subset<T, FormulaItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FormulaItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FormulaItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormulaItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FormulaItemAggregateArgs>(args: Prisma.Subset<T, FormulaItemAggregateArgs>): Prisma.PrismaPromise<GetFormulaItemAggregateType<T>>

  /**
   * Group by FormulaItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FormulaItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FormulaItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FormulaItemGroupByArgs['orderBy'] }
      : { orderBy?: FormulaItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FormulaItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormulaItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FormulaItem model
 */
readonly fields: FormulaItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FormulaItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FormulaItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  formula<T extends Prisma.ProductFormulaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductFormulaDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  rawMaterial<T extends Prisma.RawMaterialDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RawMaterialDefaultArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FormulaItem model
 */
export interface FormulaItemFieldRefs {
  readonly id: Prisma.FieldRef<"FormulaItem", 'String'>
  readonly formulaId: Prisma.FieldRef<"FormulaItem", 'String'>
  readonly rawMaterialId: Prisma.FieldRef<"FormulaItem", 'String'>
  readonly quantityNeeded: Prisma.FieldRef<"FormulaItem", 'Decimal'>
}
    

// Custom InputTypes
/**
 * FormulaItem findUnique
 */
export type FormulaItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * Filter, which FormulaItem to fetch.
   */
  where: Prisma.FormulaItemWhereUniqueInput
}

/**
 * FormulaItem findUniqueOrThrow
 */
export type FormulaItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * Filter, which FormulaItem to fetch.
   */
  where: Prisma.FormulaItemWhereUniqueInput
}

/**
 * FormulaItem findFirst
 */
export type FormulaItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * Filter, which FormulaItem to fetch.
   */
  where?: Prisma.FormulaItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormulaItems to fetch.
   */
  orderBy?: Prisma.FormulaItemOrderByWithRelationInput | Prisma.FormulaItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormulaItems.
   */
  cursor?: Prisma.FormulaItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormulaItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormulaItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormulaItems.
   */
  distinct?: Prisma.FormulaItemScalarFieldEnum | Prisma.FormulaItemScalarFieldEnum[]
}

/**
 * FormulaItem findFirstOrThrow
 */
export type FormulaItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * Filter, which FormulaItem to fetch.
   */
  where?: Prisma.FormulaItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormulaItems to fetch.
   */
  orderBy?: Prisma.FormulaItemOrderByWithRelationInput | Prisma.FormulaItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FormulaItems.
   */
  cursor?: Prisma.FormulaItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormulaItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormulaItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FormulaItems.
   */
  distinct?: Prisma.FormulaItemScalarFieldEnum | Prisma.FormulaItemScalarFieldEnum[]
}

/**
 * FormulaItem findMany
 */
export type FormulaItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * Filter, which FormulaItems to fetch.
   */
  where?: Prisma.FormulaItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FormulaItems to fetch.
   */
  orderBy?: Prisma.FormulaItemOrderByWithRelationInput | Prisma.FormulaItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FormulaItems.
   */
  cursor?: Prisma.FormulaItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FormulaItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FormulaItems.
   */
  skip?: number
  distinct?: Prisma.FormulaItemScalarFieldEnum | Prisma.FormulaItemScalarFieldEnum[]
}

/**
 * FormulaItem create
 */
export type FormulaItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * The data needed to create a FormulaItem.
   */
  data: Prisma.XOR<Prisma.FormulaItemCreateInput, Prisma.FormulaItemUncheckedCreateInput>
}

/**
 * FormulaItem createMany
 */
export type FormulaItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FormulaItems.
   */
  data: Prisma.FormulaItemCreateManyInput | Prisma.FormulaItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FormulaItem createManyAndReturn
 */
export type FormulaItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * The data used to create many FormulaItems.
   */
  data: Prisma.FormulaItemCreateManyInput | Prisma.FormulaItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FormulaItem update
 */
export type FormulaItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * The data needed to update a FormulaItem.
   */
  data: Prisma.XOR<Prisma.FormulaItemUpdateInput, Prisma.FormulaItemUncheckedUpdateInput>
  /**
   * Choose, which FormulaItem to update.
   */
  where: Prisma.FormulaItemWhereUniqueInput
}

/**
 * FormulaItem updateMany
 */
export type FormulaItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FormulaItems.
   */
  data: Prisma.XOR<Prisma.FormulaItemUpdateManyMutationInput, Prisma.FormulaItemUncheckedUpdateManyInput>
  /**
   * Filter which FormulaItems to update
   */
  where?: Prisma.FormulaItemWhereInput
  /**
   * Limit how many FormulaItems to update.
   */
  limit?: number
}

/**
 * FormulaItem updateManyAndReturn
 */
export type FormulaItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * The data used to update FormulaItems.
   */
  data: Prisma.XOR<Prisma.FormulaItemUpdateManyMutationInput, Prisma.FormulaItemUncheckedUpdateManyInput>
  /**
   * Filter which FormulaItems to update
   */
  where?: Prisma.FormulaItemWhereInput
  /**
   * Limit how many FormulaItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FormulaItem upsert
 */
export type FormulaItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * The filter to search for the FormulaItem to update in case it exists.
   */
  where: Prisma.FormulaItemWhereUniqueInput
  /**
   * In case the FormulaItem found by the `where` argument doesn't exist, create a new FormulaItem with this data.
   */
  create: Prisma.XOR<Prisma.FormulaItemCreateInput, Prisma.FormulaItemUncheckedCreateInput>
  /**
   * In case the FormulaItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FormulaItemUpdateInput, Prisma.FormulaItemUncheckedUpdateInput>
}

/**
 * FormulaItem delete
 */
export type FormulaItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  /**
   * Filter which FormulaItem to delete.
   */
  where: Prisma.FormulaItemWhereUniqueInput
}

/**
 * FormulaItem deleteMany
 */
export type FormulaItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FormulaItems to delete
   */
  where?: Prisma.FormulaItemWhereInput
  /**
   * Limit how many FormulaItems to delete.
   */
  limit?: number
}

/**
 * FormulaItem without action
 */
export type FormulaItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
}
