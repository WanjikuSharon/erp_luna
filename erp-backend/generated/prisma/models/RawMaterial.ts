
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `RawMaterial` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model RawMaterial
 * 
 */
export type RawMaterialModel = runtime.Types.Result.DefaultSelection<Prisma.$RawMaterialPayload>

export type AggregateRawMaterial = {
  _count: RawMaterialCountAggregateOutputType | null
  _min: RawMaterialMinAggregateOutputType | null
  _max: RawMaterialMaxAggregateOutputType | null
}

export type RawMaterialMinAggregateOutputType = {
  id: string | null
  name: string | null
  unit: string | null
}

export type RawMaterialMaxAggregateOutputType = {
  id: string | null
  name: string | null
  unit: string | null
}

export type RawMaterialCountAggregateOutputType = {
  id: number
  name: number
  unit: number
  _all: number
}


export type RawMaterialMinAggregateInputType = {
  id?: true
  name?: true
  unit?: true
}

export type RawMaterialMaxAggregateInputType = {
  id?: true
  name?: true
  unit?: true
}

export type RawMaterialCountAggregateInputType = {
  id?: true
  name?: true
  unit?: true
  _all?: true
}

export type RawMaterialAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RawMaterial to aggregate.
   */
  where?: Prisma.RawMaterialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterials to fetch.
   */
  orderBy?: Prisma.RawMaterialOrderByWithRelationInput | Prisma.RawMaterialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RawMaterialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RawMaterials
  **/
  _count?: true | RawMaterialCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RawMaterialMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RawMaterialMaxAggregateInputType
}

export type GetRawMaterialAggregateType<T extends RawMaterialAggregateArgs> = {
      [P in keyof T & keyof AggregateRawMaterial]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRawMaterial[P]>
    : Prisma.GetScalarType<T[P], AggregateRawMaterial[P]>
}




export type RawMaterialGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RawMaterialWhereInput
  orderBy?: Prisma.RawMaterialOrderByWithAggregationInput | Prisma.RawMaterialOrderByWithAggregationInput[]
  by: Prisma.RawMaterialScalarFieldEnum[] | Prisma.RawMaterialScalarFieldEnum
  having?: Prisma.RawMaterialScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RawMaterialCountAggregateInputType | true
  _min?: RawMaterialMinAggregateInputType
  _max?: RawMaterialMaxAggregateInputType
}

export type RawMaterialGroupByOutputType = {
  id: string
  name: string
  unit: string
  _count: RawMaterialCountAggregateOutputType | null
  _min: RawMaterialMinAggregateOutputType | null
  _max: RawMaterialMaxAggregateOutputType | null
}

type GetRawMaterialGroupByPayload<T extends RawMaterialGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RawMaterialGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RawMaterialGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RawMaterialGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RawMaterialGroupByOutputType[P]>
      }
    >
  >



export type RawMaterialWhereInput = {
  AND?: Prisma.RawMaterialWhereInput | Prisma.RawMaterialWhereInput[]
  OR?: Prisma.RawMaterialWhereInput[]
  NOT?: Prisma.RawMaterialWhereInput | Prisma.RawMaterialWhereInput[]
  id?: Prisma.StringFilter<"RawMaterial"> | string
  name?: Prisma.StringFilter<"RawMaterial"> | string
  unit?: Prisma.StringFilter<"RawMaterial"> | string
  stockItems?: Prisma.RawMaterialStockListRelationFilter
  formulaItems?: Prisma.FormulaItemListRelationFilter
}

export type RawMaterialOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  stockItems?: Prisma.RawMaterialStockOrderByRelationAggregateInput
  formulaItems?: Prisma.FormulaItemOrderByRelationAggregateInput
}

export type RawMaterialWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.RawMaterialWhereInput | Prisma.RawMaterialWhereInput[]
  OR?: Prisma.RawMaterialWhereInput[]
  NOT?: Prisma.RawMaterialWhereInput | Prisma.RawMaterialWhereInput[]
  unit?: Prisma.StringFilter<"RawMaterial"> | string
  stockItems?: Prisma.RawMaterialStockListRelationFilter
  formulaItems?: Prisma.FormulaItemListRelationFilter
}, "id" | "name">

export type RawMaterialOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  _count?: Prisma.RawMaterialCountOrderByAggregateInput
  _max?: Prisma.RawMaterialMaxOrderByAggregateInput
  _min?: Prisma.RawMaterialMinOrderByAggregateInput
}

export type RawMaterialScalarWhereWithAggregatesInput = {
  AND?: Prisma.RawMaterialScalarWhereWithAggregatesInput | Prisma.RawMaterialScalarWhereWithAggregatesInput[]
  OR?: Prisma.RawMaterialScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RawMaterialScalarWhereWithAggregatesInput | Prisma.RawMaterialScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"RawMaterial"> | string
  name?: Prisma.StringWithAggregatesFilter<"RawMaterial"> | string
  unit?: Prisma.StringWithAggregatesFilter<"RawMaterial"> | string
}

export type RawMaterialCreateInput = {
  id?: string
  name: string
  unit: string
  stockItems?: Prisma.RawMaterialStockCreateNestedManyWithoutRawMaterialInput
  formulaItems?: Prisma.FormulaItemCreateNestedManyWithoutRawMaterialInput
}

export type RawMaterialUncheckedCreateInput = {
  id?: string
  name: string
  unit: string
  stockItems?: Prisma.RawMaterialStockUncheckedCreateNestedManyWithoutRawMaterialInput
  formulaItems?: Prisma.FormulaItemUncheckedCreateNestedManyWithoutRawMaterialInput
}

export type RawMaterialUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  stockItems?: Prisma.RawMaterialStockUpdateManyWithoutRawMaterialNestedInput
  formulaItems?: Prisma.FormulaItemUpdateManyWithoutRawMaterialNestedInput
}

export type RawMaterialUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  stockItems?: Prisma.RawMaterialStockUncheckedUpdateManyWithoutRawMaterialNestedInput
  formulaItems?: Prisma.FormulaItemUncheckedUpdateManyWithoutRawMaterialNestedInput
}

export type RawMaterialCreateManyInput = {
  id?: string
  name: string
  unit: string
}

export type RawMaterialUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RawMaterialUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
}

export type RawMaterialCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
}

export type RawMaterialMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
}

export type RawMaterialMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
}

export type RawMaterialScalarRelationFilter = {
  is?: Prisma.RawMaterialWhereInput
  isNot?: Prisma.RawMaterialWhereInput
}

export type RawMaterialCreateNestedOneWithoutFormulaItemsInput = {
  create?: Prisma.XOR<Prisma.RawMaterialCreateWithoutFormulaItemsInput, Prisma.RawMaterialUncheckedCreateWithoutFormulaItemsInput>
  connectOrCreate?: Prisma.RawMaterialCreateOrConnectWithoutFormulaItemsInput
  connect?: Prisma.RawMaterialWhereUniqueInput
}

export type RawMaterialUpdateOneRequiredWithoutFormulaItemsNestedInput = {
  create?: Prisma.XOR<Prisma.RawMaterialCreateWithoutFormulaItemsInput, Prisma.RawMaterialUncheckedCreateWithoutFormulaItemsInput>
  connectOrCreate?: Prisma.RawMaterialCreateOrConnectWithoutFormulaItemsInput
  upsert?: Prisma.RawMaterialUpsertWithoutFormulaItemsInput
  connect?: Prisma.RawMaterialWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RawMaterialUpdateToOneWithWhereWithoutFormulaItemsInput, Prisma.RawMaterialUpdateWithoutFormulaItemsInput>, Prisma.RawMaterialUncheckedUpdateWithoutFormulaItemsInput>
}

export type RawMaterialCreateNestedOneWithoutStockItemsInput = {
  create?: Prisma.XOR<Prisma.RawMaterialCreateWithoutStockItemsInput, Prisma.RawMaterialUncheckedCreateWithoutStockItemsInput>
  connectOrCreate?: Prisma.RawMaterialCreateOrConnectWithoutStockItemsInput
  connect?: Prisma.RawMaterialWhereUniqueInput
}

export type RawMaterialUpdateOneRequiredWithoutStockItemsNestedInput = {
  create?: Prisma.XOR<Prisma.RawMaterialCreateWithoutStockItemsInput, Prisma.RawMaterialUncheckedCreateWithoutStockItemsInput>
  connectOrCreate?: Prisma.RawMaterialCreateOrConnectWithoutStockItemsInput
  upsert?: Prisma.RawMaterialUpsertWithoutStockItemsInput
  connect?: Prisma.RawMaterialWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RawMaterialUpdateToOneWithWhereWithoutStockItemsInput, Prisma.RawMaterialUpdateWithoutStockItemsInput>, Prisma.RawMaterialUncheckedUpdateWithoutStockItemsInput>
}

export type RawMaterialCreateWithoutFormulaItemsInput = {
  id?: string
  name: string
  unit: string
  stockItems?: Prisma.RawMaterialStockCreateNestedManyWithoutRawMaterialInput
}

export type RawMaterialUncheckedCreateWithoutFormulaItemsInput = {
  id?: string
  name: string
  unit: string
  stockItems?: Prisma.RawMaterialStockUncheckedCreateNestedManyWithoutRawMaterialInput
}

export type RawMaterialCreateOrConnectWithoutFormulaItemsInput = {
  where: Prisma.RawMaterialWhereUniqueInput
  create: Prisma.XOR<Prisma.RawMaterialCreateWithoutFormulaItemsInput, Prisma.RawMaterialUncheckedCreateWithoutFormulaItemsInput>
}

export type RawMaterialUpsertWithoutFormulaItemsInput = {
  update: Prisma.XOR<Prisma.RawMaterialUpdateWithoutFormulaItemsInput, Prisma.RawMaterialUncheckedUpdateWithoutFormulaItemsInput>
  create: Prisma.XOR<Prisma.RawMaterialCreateWithoutFormulaItemsInput, Prisma.RawMaterialUncheckedCreateWithoutFormulaItemsInput>
  where?: Prisma.RawMaterialWhereInput
}

export type RawMaterialUpdateToOneWithWhereWithoutFormulaItemsInput = {
  where?: Prisma.RawMaterialWhereInput
  data: Prisma.XOR<Prisma.RawMaterialUpdateWithoutFormulaItemsInput, Prisma.RawMaterialUncheckedUpdateWithoutFormulaItemsInput>
}

export type RawMaterialUpdateWithoutFormulaItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  stockItems?: Prisma.RawMaterialStockUpdateManyWithoutRawMaterialNestedInput
}

export type RawMaterialUncheckedUpdateWithoutFormulaItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  stockItems?: Prisma.RawMaterialStockUncheckedUpdateManyWithoutRawMaterialNestedInput
}

export type RawMaterialCreateWithoutStockItemsInput = {
  id?: string
  name: string
  unit: string
  formulaItems?: Prisma.FormulaItemCreateNestedManyWithoutRawMaterialInput
}

export type RawMaterialUncheckedCreateWithoutStockItemsInput = {
  id?: string
  name: string
  unit: string
  formulaItems?: Prisma.FormulaItemUncheckedCreateNestedManyWithoutRawMaterialInput
}

export type RawMaterialCreateOrConnectWithoutStockItemsInput = {
  where: Prisma.RawMaterialWhereUniqueInput
  create: Prisma.XOR<Prisma.RawMaterialCreateWithoutStockItemsInput, Prisma.RawMaterialUncheckedCreateWithoutStockItemsInput>
}

export type RawMaterialUpsertWithoutStockItemsInput = {
  update: Prisma.XOR<Prisma.RawMaterialUpdateWithoutStockItemsInput, Prisma.RawMaterialUncheckedUpdateWithoutStockItemsInput>
  create: Prisma.XOR<Prisma.RawMaterialCreateWithoutStockItemsInput, Prisma.RawMaterialUncheckedCreateWithoutStockItemsInput>
  where?: Prisma.RawMaterialWhereInput
}

export type RawMaterialUpdateToOneWithWhereWithoutStockItemsInput = {
  where?: Prisma.RawMaterialWhereInput
  data: Prisma.XOR<Prisma.RawMaterialUpdateWithoutStockItemsInput, Prisma.RawMaterialUncheckedUpdateWithoutStockItemsInput>
}

export type RawMaterialUpdateWithoutStockItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  formulaItems?: Prisma.FormulaItemUpdateManyWithoutRawMaterialNestedInput
}

export type RawMaterialUncheckedUpdateWithoutStockItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  formulaItems?: Prisma.FormulaItemUncheckedUpdateManyWithoutRawMaterialNestedInput
}


/**
 * Count Type RawMaterialCountOutputType
 */

export type RawMaterialCountOutputType = {
  stockItems: number
  formulaItems: number
}

export type RawMaterialCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  stockItems?: boolean | RawMaterialCountOutputTypeCountStockItemsArgs
  formulaItems?: boolean | RawMaterialCountOutputTypeCountFormulaItemsArgs
}

/**
 * RawMaterialCountOutputType without action
 */
export type RawMaterialCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialCountOutputType
   */
  select?: Prisma.RawMaterialCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RawMaterialCountOutputType without action
 */
export type RawMaterialCountOutputTypeCountStockItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RawMaterialStockWhereInput
}

/**
 * RawMaterialCountOutputType without action
 */
export type RawMaterialCountOutputTypeCountFormulaItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormulaItemWhereInput
}


export type RawMaterialSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  unit?: boolean
  stockItems?: boolean | Prisma.RawMaterial$stockItemsArgs<ExtArgs>
  formulaItems?: boolean | Prisma.RawMaterial$formulaItemsArgs<ExtArgs>
  _count?: boolean | Prisma.RawMaterialCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rawMaterial"]>

export type RawMaterialSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  unit?: boolean
}, ExtArgs["result"]["rawMaterial"]>

export type RawMaterialSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  unit?: boolean
}, ExtArgs["result"]["rawMaterial"]>

export type RawMaterialSelectScalar = {
  id?: boolean
  name?: boolean
  unit?: boolean
}

export type RawMaterialOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "unit", ExtArgs["result"]["rawMaterial"]>
export type RawMaterialInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  stockItems?: boolean | Prisma.RawMaterial$stockItemsArgs<ExtArgs>
  formulaItems?: boolean | Prisma.RawMaterial$formulaItemsArgs<ExtArgs>
  _count?: boolean | Prisma.RawMaterialCountOutputTypeDefaultArgs<ExtArgs>
}
export type RawMaterialIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type RawMaterialIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $RawMaterialPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RawMaterial"
  objects: {
    stockItems: Prisma.$RawMaterialStockPayload<ExtArgs>[]
    formulaItems: Prisma.$FormulaItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    unit: string
  }, ExtArgs["result"]["rawMaterial"]>
  composites: {}
}

export type RawMaterialGetPayload<S extends boolean | null | undefined | RawMaterialDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload, S>

export type RawMaterialCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RawMaterialFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RawMaterialCountAggregateInputType | true
  }

export interface RawMaterialDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RawMaterial'], meta: { name: 'RawMaterial' } }
  /**
   * Find zero or one RawMaterial that matches the filter.
   * @param {RawMaterialFindUniqueArgs} args - Arguments to find a RawMaterial
   * @example
   * // Get one RawMaterial
   * const rawMaterial = await prisma.rawMaterial.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RawMaterialFindUniqueArgs>(args: Prisma.SelectSubset<T, RawMaterialFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RawMaterial that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RawMaterialFindUniqueOrThrowArgs} args - Arguments to find a RawMaterial
   * @example
   * // Get one RawMaterial
   * const rawMaterial = await prisma.rawMaterial.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RawMaterialFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RawMaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RawMaterial that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialFindFirstArgs} args - Arguments to find a RawMaterial
   * @example
   * // Get one RawMaterial
   * const rawMaterial = await prisma.rawMaterial.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RawMaterialFindFirstArgs>(args?: Prisma.SelectSubset<T, RawMaterialFindFirstArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RawMaterial that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialFindFirstOrThrowArgs} args - Arguments to find a RawMaterial
   * @example
   * // Get one RawMaterial
   * const rawMaterial = await prisma.rawMaterial.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RawMaterialFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RawMaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RawMaterials that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RawMaterials
   * const rawMaterials = await prisma.rawMaterial.findMany()
   * 
   * // Get first 10 RawMaterials
   * const rawMaterials = await prisma.rawMaterial.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rawMaterialWithIdOnly = await prisma.rawMaterial.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RawMaterialFindManyArgs>(args?: Prisma.SelectSubset<T, RawMaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RawMaterial.
   * @param {RawMaterialCreateArgs} args - Arguments to create a RawMaterial.
   * @example
   * // Create one RawMaterial
   * const RawMaterial = await prisma.rawMaterial.create({
   *   data: {
   *     // ... data to create a RawMaterial
   *   }
   * })
   * 
   */
  create<T extends RawMaterialCreateArgs>(args: Prisma.SelectSubset<T, RawMaterialCreateArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RawMaterials.
   * @param {RawMaterialCreateManyArgs} args - Arguments to create many RawMaterials.
   * @example
   * // Create many RawMaterials
   * const rawMaterial = await prisma.rawMaterial.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RawMaterialCreateManyArgs>(args?: Prisma.SelectSubset<T, RawMaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many RawMaterials and returns the data saved in the database.
   * @param {RawMaterialCreateManyAndReturnArgs} args - Arguments to create many RawMaterials.
   * @example
   * // Create many RawMaterials
   * const rawMaterial = await prisma.rawMaterial.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many RawMaterials and only return the `id`
   * const rawMaterialWithIdOnly = await prisma.rawMaterial.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RawMaterialCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RawMaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a RawMaterial.
   * @param {RawMaterialDeleteArgs} args - Arguments to delete one RawMaterial.
   * @example
   * // Delete one RawMaterial
   * const RawMaterial = await prisma.rawMaterial.delete({
   *   where: {
   *     // ... filter to delete one RawMaterial
   *   }
   * })
   * 
   */
  delete<T extends RawMaterialDeleteArgs>(args: Prisma.SelectSubset<T, RawMaterialDeleteArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RawMaterial.
   * @param {RawMaterialUpdateArgs} args - Arguments to update one RawMaterial.
   * @example
   * // Update one RawMaterial
   * const rawMaterial = await prisma.rawMaterial.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RawMaterialUpdateArgs>(args: Prisma.SelectSubset<T, RawMaterialUpdateArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RawMaterials.
   * @param {RawMaterialDeleteManyArgs} args - Arguments to filter RawMaterials to delete.
   * @example
   * // Delete a few RawMaterials
   * const { count } = await prisma.rawMaterial.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RawMaterialDeleteManyArgs>(args?: Prisma.SelectSubset<T, RawMaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RawMaterials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RawMaterials
   * const rawMaterial = await prisma.rawMaterial.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RawMaterialUpdateManyArgs>(args: Prisma.SelectSubset<T, RawMaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RawMaterials and returns the data updated in the database.
   * @param {RawMaterialUpdateManyAndReturnArgs} args - Arguments to update many RawMaterials.
   * @example
   * // Update many RawMaterials
   * const rawMaterial = await prisma.rawMaterial.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more RawMaterials and only return the `id`
   * const rawMaterialWithIdOnly = await prisma.rawMaterial.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RawMaterialUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RawMaterialUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one RawMaterial.
   * @param {RawMaterialUpsertArgs} args - Arguments to update or create a RawMaterial.
   * @example
   * // Update or create a RawMaterial
   * const rawMaterial = await prisma.rawMaterial.upsert({
   *   create: {
   *     // ... data to create a RawMaterial
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RawMaterial we want to update
   *   }
   * })
   */
  upsert<T extends RawMaterialUpsertArgs>(args: Prisma.SelectSubset<T, RawMaterialUpsertArgs<ExtArgs>>): Prisma.Prisma__RawMaterialClient<runtime.Types.Result.GetResult<Prisma.$RawMaterialPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RawMaterials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialCountArgs} args - Arguments to filter RawMaterials to count.
   * @example
   * // Count the number of RawMaterials
   * const count = await prisma.rawMaterial.count({
   *   where: {
   *     // ... the filter for the RawMaterials we want to count
   *   }
   * })
  **/
  count<T extends RawMaterialCountArgs>(
    args?: Prisma.Subset<T, RawMaterialCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RawMaterialCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RawMaterial.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RawMaterialAggregateArgs>(args: Prisma.Subset<T, RawMaterialAggregateArgs>): Prisma.PrismaPromise<GetRawMaterialAggregateType<T>>

  /**
   * Group by RawMaterial.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawMaterialGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RawMaterialGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RawMaterialGroupByArgs['orderBy'] }
      : { orderBy?: RawMaterialGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RawMaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRawMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RawMaterial model
 */
readonly fields: RawMaterialFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RawMaterial.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RawMaterialClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  stockItems<T extends Prisma.RawMaterial$stockItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RawMaterial$stockItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RawMaterialStockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  formulaItems<T extends Prisma.RawMaterial$formulaItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RawMaterial$formulaItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RawMaterial model
 */
export interface RawMaterialFieldRefs {
  readonly id: Prisma.FieldRef<"RawMaterial", 'String'>
  readonly name: Prisma.FieldRef<"RawMaterial", 'String'>
  readonly unit: Prisma.FieldRef<"RawMaterial", 'String'>
}
    

// Custom InputTypes
/**
 * RawMaterial findUnique
 */
export type RawMaterialFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterial to fetch.
   */
  where: Prisma.RawMaterialWhereUniqueInput
}

/**
 * RawMaterial findUniqueOrThrow
 */
export type RawMaterialFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterial to fetch.
   */
  where: Prisma.RawMaterialWhereUniqueInput
}

/**
 * RawMaterial findFirst
 */
export type RawMaterialFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterial to fetch.
   */
  where?: Prisma.RawMaterialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterials to fetch.
   */
  orderBy?: Prisma.RawMaterialOrderByWithRelationInput | Prisma.RawMaterialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RawMaterials.
   */
  cursor?: Prisma.RawMaterialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RawMaterials.
   */
  distinct?: Prisma.RawMaterialScalarFieldEnum | Prisma.RawMaterialScalarFieldEnum[]
}

/**
 * RawMaterial findFirstOrThrow
 */
export type RawMaterialFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterial to fetch.
   */
  where?: Prisma.RawMaterialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterials to fetch.
   */
  orderBy?: Prisma.RawMaterialOrderByWithRelationInput | Prisma.RawMaterialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RawMaterials.
   */
  cursor?: Prisma.RawMaterialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RawMaterials.
   */
  distinct?: Prisma.RawMaterialScalarFieldEnum | Prisma.RawMaterialScalarFieldEnum[]
}

/**
 * RawMaterial findMany
 */
export type RawMaterialFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * Filter, which RawMaterials to fetch.
   */
  where?: Prisma.RawMaterialWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RawMaterials to fetch.
   */
  orderBy?: Prisma.RawMaterialOrderByWithRelationInput | Prisma.RawMaterialOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RawMaterials.
   */
  cursor?: Prisma.RawMaterialWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RawMaterials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RawMaterials.
   */
  skip?: number
  distinct?: Prisma.RawMaterialScalarFieldEnum | Prisma.RawMaterialScalarFieldEnum[]
}

/**
 * RawMaterial create
 */
export type RawMaterialCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * The data needed to create a RawMaterial.
   */
  data: Prisma.XOR<Prisma.RawMaterialCreateInput, Prisma.RawMaterialUncheckedCreateInput>
}

/**
 * RawMaterial createMany
 */
export type RawMaterialCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RawMaterials.
   */
  data: Prisma.RawMaterialCreateManyInput | Prisma.RawMaterialCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RawMaterial createManyAndReturn
 */
export type RawMaterialCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * The data used to create many RawMaterials.
   */
  data: Prisma.RawMaterialCreateManyInput | Prisma.RawMaterialCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RawMaterial update
 */
export type RawMaterialUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * The data needed to update a RawMaterial.
   */
  data: Prisma.XOR<Prisma.RawMaterialUpdateInput, Prisma.RawMaterialUncheckedUpdateInput>
  /**
   * Choose, which RawMaterial to update.
   */
  where: Prisma.RawMaterialWhereUniqueInput
}

/**
 * RawMaterial updateMany
 */
export type RawMaterialUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RawMaterials.
   */
  data: Prisma.XOR<Prisma.RawMaterialUpdateManyMutationInput, Prisma.RawMaterialUncheckedUpdateManyInput>
  /**
   * Filter which RawMaterials to update
   */
  where?: Prisma.RawMaterialWhereInput
  /**
   * Limit how many RawMaterials to update.
   */
  limit?: number
}

/**
 * RawMaterial updateManyAndReturn
 */
export type RawMaterialUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * The data used to update RawMaterials.
   */
  data: Prisma.XOR<Prisma.RawMaterialUpdateManyMutationInput, Prisma.RawMaterialUncheckedUpdateManyInput>
  /**
   * Filter which RawMaterials to update
   */
  where?: Prisma.RawMaterialWhereInput
  /**
   * Limit how many RawMaterials to update.
   */
  limit?: number
}

/**
 * RawMaterial upsert
 */
export type RawMaterialUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * The filter to search for the RawMaterial to update in case it exists.
   */
  where: Prisma.RawMaterialWhereUniqueInput
  /**
   * In case the RawMaterial found by the `where` argument doesn't exist, create a new RawMaterial with this data.
   */
  create: Prisma.XOR<Prisma.RawMaterialCreateInput, Prisma.RawMaterialUncheckedCreateInput>
  /**
   * In case the RawMaterial was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RawMaterialUpdateInput, Prisma.RawMaterialUncheckedUpdateInput>
}

/**
 * RawMaterial delete
 */
export type RawMaterialDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
  /**
   * Filter which RawMaterial to delete.
   */
  where: Prisma.RawMaterialWhereUniqueInput
}

/**
 * RawMaterial deleteMany
 */
export type RawMaterialDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RawMaterials to delete
   */
  where?: Prisma.RawMaterialWhereInput
  /**
   * Limit how many RawMaterials to delete.
   */
  limit?: number
}

/**
 * RawMaterial.stockItems
 */
export type RawMaterial$stockItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterialStock
   */
  select?: Prisma.RawMaterialStockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterialStock
   */
  omit?: Prisma.RawMaterialStockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialStockInclude<ExtArgs> | null
  where?: Prisma.RawMaterialStockWhereInput
  orderBy?: Prisma.RawMaterialStockOrderByWithRelationInput | Prisma.RawMaterialStockOrderByWithRelationInput[]
  cursor?: Prisma.RawMaterialStockWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RawMaterialStockScalarFieldEnum | Prisma.RawMaterialStockScalarFieldEnum[]
}

/**
 * RawMaterial.formulaItems
 */
export type RawMaterial$formulaItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  where?: Prisma.FormulaItemWhereInput
  orderBy?: Prisma.FormulaItemOrderByWithRelationInput | Prisma.FormulaItemOrderByWithRelationInput[]
  cursor?: Prisma.FormulaItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormulaItemScalarFieldEnum | Prisma.FormulaItemScalarFieldEnum[]
}

/**
 * RawMaterial without action
 */
export type RawMaterialDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RawMaterial
   */
  select?: Prisma.RawMaterialSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RawMaterial
   */
  omit?: Prisma.RawMaterialOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RawMaterialInclude<ExtArgs> | null
}
