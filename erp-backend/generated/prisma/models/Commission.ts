
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Commission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Commission
 * 
 */
export type CommissionModel = runtime.Types.Result.DefaultSelection<Prisma.$CommissionPayload>

export type AggregateCommission = {
  _count: CommissionCountAggregateOutputType | null
  _avg: CommissionAvgAggregateOutputType | null
  _sum: CommissionSumAggregateOutputType | null
  _min: CommissionMinAggregateOutputType | null
  _max: CommissionMaxAggregateOutputType | null
}

export type CommissionAvgAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type CommissionSumAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type CommissionMinAggregateOutputType = {
  id: string | null
  salesPersonId: string | null
  invoiceId: string | null
  amount: runtime.Decimal | null
  status: string | null
  createdAt: Date | null
}

export type CommissionMaxAggregateOutputType = {
  id: string | null
  salesPersonId: string | null
  invoiceId: string | null
  amount: runtime.Decimal | null
  status: string | null
  createdAt: Date | null
}

export type CommissionCountAggregateOutputType = {
  id: number
  salesPersonId: number
  invoiceId: number
  amount: number
  status: number
  createdAt: number
  _all: number
}


export type CommissionAvgAggregateInputType = {
  amount?: true
}

export type CommissionSumAggregateInputType = {
  amount?: true
}

export type CommissionMinAggregateInputType = {
  id?: true
  salesPersonId?: true
  invoiceId?: true
  amount?: true
  status?: true
  createdAt?: true
}

export type CommissionMaxAggregateInputType = {
  id?: true
  salesPersonId?: true
  invoiceId?: true
  amount?: true
  status?: true
  createdAt?: true
}

export type CommissionCountAggregateInputType = {
  id?: true
  salesPersonId?: true
  invoiceId?: true
  amount?: true
  status?: true
  createdAt?: true
  _all?: true
}

export type CommissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Commission to aggregate.
   */
  where?: Prisma.CommissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Commissions to fetch.
   */
  orderBy?: Prisma.CommissionOrderByWithRelationInput | Prisma.CommissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CommissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Commissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Commissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Commissions
  **/
  _count?: true | CommissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CommissionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CommissionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CommissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CommissionMaxAggregateInputType
}

export type GetCommissionAggregateType<T extends CommissionAggregateArgs> = {
      [P in keyof T & keyof AggregateCommission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCommission[P]>
    : Prisma.GetScalarType<T[P], AggregateCommission[P]>
}




export type CommissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CommissionWhereInput
  orderBy?: Prisma.CommissionOrderByWithAggregationInput | Prisma.CommissionOrderByWithAggregationInput[]
  by: Prisma.CommissionScalarFieldEnum[] | Prisma.CommissionScalarFieldEnum
  having?: Prisma.CommissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CommissionCountAggregateInputType | true
  _avg?: CommissionAvgAggregateInputType
  _sum?: CommissionSumAggregateInputType
  _min?: CommissionMinAggregateInputType
  _max?: CommissionMaxAggregateInputType
}

export type CommissionGroupByOutputType = {
  id: string
  salesPersonId: string
  invoiceId: string
  amount: runtime.Decimal
  status: string
  createdAt: Date
  _count: CommissionCountAggregateOutputType | null
  _avg: CommissionAvgAggregateOutputType | null
  _sum: CommissionSumAggregateOutputType | null
  _min: CommissionMinAggregateOutputType | null
  _max: CommissionMaxAggregateOutputType | null
}

type GetCommissionGroupByPayload<T extends CommissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CommissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CommissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CommissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CommissionGroupByOutputType[P]>
      }
    >
  >



export type CommissionWhereInput = {
  AND?: Prisma.CommissionWhereInput | Prisma.CommissionWhereInput[]
  OR?: Prisma.CommissionWhereInput[]
  NOT?: Prisma.CommissionWhereInput | Prisma.CommissionWhereInput[]
  id?: Prisma.StringFilter<"Commission"> | string
  salesPersonId?: Prisma.StringFilter<"Commission"> | string
  invoiceId?: Prisma.StringFilter<"Commission"> | string
  amount?: Prisma.DecimalFilter<"Commission"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFilter<"Commission"> | string
  createdAt?: Prisma.DateTimeFilter<"Commission"> | Date | string
  salesPerson?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type CommissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  salesPersonId?: Prisma.SortOrder
  invoiceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  salesPerson?: Prisma.UserOrderByWithRelationInput
}

export type CommissionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CommissionWhereInput | Prisma.CommissionWhereInput[]
  OR?: Prisma.CommissionWhereInput[]
  NOT?: Prisma.CommissionWhereInput | Prisma.CommissionWhereInput[]
  salesPersonId?: Prisma.StringFilter<"Commission"> | string
  invoiceId?: Prisma.StringFilter<"Commission"> | string
  amount?: Prisma.DecimalFilter<"Commission"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFilter<"Commission"> | string
  createdAt?: Prisma.DateTimeFilter<"Commission"> | Date | string
  salesPerson?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type CommissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  salesPersonId?: Prisma.SortOrder
  invoiceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.CommissionCountOrderByAggregateInput
  _avg?: Prisma.CommissionAvgOrderByAggregateInput
  _max?: Prisma.CommissionMaxOrderByAggregateInput
  _min?: Prisma.CommissionMinOrderByAggregateInput
  _sum?: Prisma.CommissionSumOrderByAggregateInput
}

export type CommissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.CommissionScalarWhereWithAggregatesInput | Prisma.CommissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.CommissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CommissionScalarWhereWithAggregatesInput | Prisma.CommissionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Commission"> | string
  salesPersonId?: Prisma.StringWithAggregatesFilter<"Commission"> | string
  invoiceId?: Prisma.StringWithAggregatesFilter<"Commission"> | string
  amount?: Prisma.DecimalWithAggregatesFilter<"Commission"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringWithAggregatesFilter<"Commission"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Commission"> | Date | string
}

export type CommissionCreateInput = {
  id?: string
  invoiceId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: string
  createdAt?: Date | string
  salesPerson: Prisma.UserCreateNestedOneWithoutCommissionsInput
}

export type CommissionUncheckedCreateInput = {
  id?: string
  salesPersonId: string
  invoiceId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: string
  createdAt?: Date | string
}

export type CommissionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  invoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  salesPerson?: Prisma.UserUpdateOneRequiredWithoutCommissionsNestedInput
}

export type CommissionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  salesPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  invoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommissionCreateManyInput = {
  id?: string
  salesPersonId: string
  invoiceId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: string
  createdAt?: Date | string
}

export type CommissionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  invoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommissionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  salesPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  invoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommissionListRelationFilter = {
  every?: Prisma.CommissionWhereInput
  some?: Prisma.CommissionWhereInput
  none?: Prisma.CommissionWhereInput
}

export type CommissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CommissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  salesPersonId?: Prisma.SortOrder
  invoiceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CommissionAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type CommissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  salesPersonId?: Prisma.SortOrder
  invoiceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CommissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  salesPersonId?: Prisma.SortOrder
  invoiceId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type CommissionSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type CommissionCreateNestedManyWithoutSalesPersonInput = {
  create?: Prisma.XOR<Prisma.CommissionCreateWithoutSalesPersonInput, Prisma.CommissionUncheckedCreateWithoutSalesPersonInput> | Prisma.CommissionCreateWithoutSalesPersonInput[] | Prisma.CommissionUncheckedCreateWithoutSalesPersonInput[]
  connectOrCreate?: Prisma.CommissionCreateOrConnectWithoutSalesPersonInput | Prisma.CommissionCreateOrConnectWithoutSalesPersonInput[]
  createMany?: Prisma.CommissionCreateManySalesPersonInputEnvelope
  connect?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
}

export type CommissionUncheckedCreateNestedManyWithoutSalesPersonInput = {
  create?: Prisma.XOR<Prisma.CommissionCreateWithoutSalesPersonInput, Prisma.CommissionUncheckedCreateWithoutSalesPersonInput> | Prisma.CommissionCreateWithoutSalesPersonInput[] | Prisma.CommissionUncheckedCreateWithoutSalesPersonInput[]
  connectOrCreate?: Prisma.CommissionCreateOrConnectWithoutSalesPersonInput | Prisma.CommissionCreateOrConnectWithoutSalesPersonInput[]
  createMany?: Prisma.CommissionCreateManySalesPersonInputEnvelope
  connect?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
}

export type CommissionUpdateManyWithoutSalesPersonNestedInput = {
  create?: Prisma.XOR<Prisma.CommissionCreateWithoutSalesPersonInput, Prisma.CommissionUncheckedCreateWithoutSalesPersonInput> | Prisma.CommissionCreateWithoutSalesPersonInput[] | Prisma.CommissionUncheckedCreateWithoutSalesPersonInput[]
  connectOrCreate?: Prisma.CommissionCreateOrConnectWithoutSalesPersonInput | Prisma.CommissionCreateOrConnectWithoutSalesPersonInput[]
  upsert?: Prisma.CommissionUpsertWithWhereUniqueWithoutSalesPersonInput | Prisma.CommissionUpsertWithWhereUniqueWithoutSalesPersonInput[]
  createMany?: Prisma.CommissionCreateManySalesPersonInputEnvelope
  set?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  disconnect?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  delete?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  connect?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  update?: Prisma.CommissionUpdateWithWhereUniqueWithoutSalesPersonInput | Prisma.CommissionUpdateWithWhereUniqueWithoutSalesPersonInput[]
  updateMany?: Prisma.CommissionUpdateManyWithWhereWithoutSalesPersonInput | Prisma.CommissionUpdateManyWithWhereWithoutSalesPersonInput[]
  deleteMany?: Prisma.CommissionScalarWhereInput | Prisma.CommissionScalarWhereInput[]
}

export type CommissionUncheckedUpdateManyWithoutSalesPersonNestedInput = {
  create?: Prisma.XOR<Prisma.CommissionCreateWithoutSalesPersonInput, Prisma.CommissionUncheckedCreateWithoutSalesPersonInput> | Prisma.CommissionCreateWithoutSalesPersonInput[] | Prisma.CommissionUncheckedCreateWithoutSalesPersonInput[]
  connectOrCreate?: Prisma.CommissionCreateOrConnectWithoutSalesPersonInput | Prisma.CommissionCreateOrConnectWithoutSalesPersonInput[]
  upsert?: Prisma.CommissionUpsertWithWhereUniqueWithoutSalesPersonInput | Prisma.CommissionUpsertWithWhereUniqueWithoutSalesPersonInput[]
  createMany?: Prisma.CommissionCreateManySalesPersonInputEnvelope
  set?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  disconnect?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  delete?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  connect?: Prisma.CommissionWhereUniqueInput | Prisma.CommissionWhereUniqueInput[]
  update?: Prisma.CommissionUpdateWithWhereUniqueWithoutSalesPersonInput | Prisma.CommissionUpdateWithWhereUniqueWithoutSalesPersonInput[]
  updateMany?: Prisma.CommissionUpdateManyWithWhereWithoutSalesPersonInput | Prisma.CommissionUpdateManyWithWhereWithoutSalesPersonInput[]
  deleteMany?: Prisma.CommissionScalarWhereInput | Prisma.CommissionScalarWhereInput[]
}

export type CommissionCreateWithoutSalesPersonInput = {
  id?: string
  invoiceId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: string
  createdAt?: Date | string
}

export type CommissionUncheckedCreateWithoutSalesPersonInput = {
  id?: string
  invoiceId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: string
  createdAt?: Date | string
}

export type CommissionCreateOrConnectWithoutSalesPersonInput = {
  where: Prisma.CommissionWhereUniqueInput
  create: Prisma.XOR<Prisma.CommissionCreateWithoutSalesPersonInput, Prisma.CommissionUncheckedCreateWithoutSalesPersonInput>
}

export type CommissionCreateManySalesPersonInputEnvelope = {
  data: Prisma.CommissionCreateManySalesPersonInput | Prisma.CommissionCreateManySalesPersonInput[]
  skipDuplicates?: boolean
}

export type CommissionUpsertWithWhereUniqueWithoutSalesPersonInput = {
  where: Prisma.CommissionWhereUniqueInput
  update: Prisma.XOR<Prisma.CommissionUpdateWithoutSalesPersonInput, Prisma.CommissionUncheckedUpdateWithoutSalesPersonInput>
  create: Prisma.XOR<Prisma.CommissionCreateWithoutSalesPersonInput, Prisma.CommissionUncheckedCreateWithoutSalesPersonInput>
}

export type CommissionUpdateWithWhereUniqueWithoutSalesPersonInput = {
  where: Prisma.CommissionWhereUniqueInput
  data: Prisma.XOR<Prisma.CommissionUpdateWithoutSalesPersonInput, Prisma.CommissionUncheckedUpdateWithoutSalesPersonInput>
}

export type CommissionUpdateManyWithWhereWithoutSalesPersonInput = {
  where: Prisma.CommissionScalarWhereInput
  data: Prisma.XOR<Prisma.CommissionUpdateManyMutationInput, Prisma.CommissionUncheckedUpdateManyWithoutSalesPersonInput>
}

export type CommissionScalarWhereInput = {
  AND?: Prisma.CommissionScalarWhereInput | Prisma.CommissionScalarWhereInput[]
  OR?: Prisma.CommissionScalarWhereInput[]
  NOT?: Prisma.CommissionScalarWhereInput | Prisma.CommissionScalarWhereInput[]
  id?: Prisma.StringFilter<"Commission"> | string
  salesPersonId?: Prisma.StringFilter<"Commission"> | string
  invoiceId?: Prisma.StringFilter<"Commission"> | string
  amount?: Prisma.DecimalFilter<"Commission"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFilter<"Commission"> | string
  createdAt?: Prisma.DateTimeFilter<"Commission"> | Date | string
}

export type CommissionCreateManySalesPersonInput = {
  id?: string
  invoiceId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status: string
  createdAt?: Date | string
}

export type CommissionUpdateWithoutSalesPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  invoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommissionUncheckedUpdateWithoutSalesPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  invoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CommissionUncheckedUpdateManyWithoutSalesPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  invoiceId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CommissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  salesPersonId?: boolean
  invoiceId?: boolean
  amount?: boolean
  status?: boolean
  createdAt?: boolean
  salesPerson?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["commission"]>

export type CommissionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  salesPersonId?: boolean
  invoiceId?: boolean
  amount?: boolean
  status?: boolean
  createdAt?: boolean
  salesPerson?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["commission"]>

export type CommissionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  salesPersonId?: boolean
  invoiceId?: boolean
  amount?: boolean
  status?: boolean
  createdAt?: boolean
  salesPerson?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["commission"]>

export type CommissionSelectScalar = {
  id?: boolean
  salesPersonId?: boolean
  invoiceId?: boolean
  amount?: boolean
  status?: boolean
  createdAt?: boolean
}

export type CommissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "salesPersonId" | "invoiceId" | "amount" | "status" | "createdAt", ExtArgs["result"]["commission"]>
export type CommissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  salesPerson?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CommissionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  salesPerson?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CommissionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  salesPerson?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CommissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Commission"
  objects: {
    salesPerson: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    salesPersonId: string
    invoiceId: string
    amount: runtime.Decimal
    status: string
    createdAt: Date
  }, ExtArgs["result"]["commission"]>
  composites: {}
}

export type CommissionGetPayload<S extends boolean | null | undefined | CommissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CommissionPayload, S>

export type CommissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CommissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CommissionCountAggregateInputType | true
  }

export interface CommissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Commission'], meta: { name: 'Commission' } }
  /**
   * Find zero or one Commission that matches the filter.
   * @param {CommissionFindUniqueArgs} args - Arguments to find a Commission
   * @example
   * // Get one Commission
   * const commission = await prisma.commission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CommissionFindUniqueArgs>(args: Prisma.SelectSubset<T, CommissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Commission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CommissionFindUniqueOrThrowArgs} args - Arguments to find a Commission
   * @example
   * // Get one Commission
   * const commission = await prisma.commission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CommissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CommissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Commission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommissionFindFirstArgs} args - Arguments to find a Commission
   * @example
   * // Get one Commission
   * const commission = await prisma.commission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CommissionFindFirstArgs>(args?: Prisma.SelectSubset<T, CommissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Commission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommissionFindFirstOrThrowArgs} args - Arguments to find a Commission
   * @example
   * // Get one Commission
   * const commission = await prisma.commission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CommissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CommissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Commissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Commissions
   * const commissions = await prisma.commission.findMany()
   * 
   * // Get first 10 Commissions
   * const commissions = await prisma.commission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const commissionWithIdOnly = await prisma.commission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CommissionFindManyArgs>(args?: Prisma.SelectSubset<T, CommissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Commission.
   * @param {CommissionCreateArgs} args - Arguments to create a Commission.
   * @example
   * // Create one Commission
   * const Commission = await prisma.commission.create({
   *   data: {
   *     // ... data to create a Commission
   *   }
   * })
   * 
   */
  create<T extends CommissionCreateArgs>(args: Prisma.SelectSubset<T, CommissionCreateArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Commissions.
   * @param {CommissionCreateManyArgs} args - Arguments to create many Commissions.
   * @example
   * // Create many Commissions
   * const commission = await prisma.commission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CommissionCreateManyArgs>(args?: Prisma.SelectSubset<T, CommissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Commissions and returns the data saved in the database.
   * @param {CommissionCreateManyAndReturnArgs} args - Arguments to create many Commissions.
   * @example
   * // Create many Commissions
   * const commission = await prisma.commission.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Commissions and only return the `id`
   * const commissionWithIdOnly = await prisma.commission.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CommissionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CommissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Commission.
   * @param {CommissionDeleteArgs} args - Arguments to delete one Commission.
   * @example
   * // Delete one Commission
   * const Commission = await prisma.commission.delete({
   *   where: {
   *     // ... filter to delete one Commission
   *   }
   * })
   * 
   */
  delete<T extends CommissionDeleteArgs>(args: Prisma.SelectSubset<T, CommissionDeleteArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Commission.
   * @param {CommissionUpdateArgs} args - Arguments to update one Commission.
   * @example
   * // Update one Commission
   * const commission = await prisma.commission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CommissionUpdateArgs>(args: Prisma.SelectSubset<T, CommissionUpdateArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Commissions.
   * @param {CommissionDeleteManyArgs} args - Arguments to filter Commissions to delete.
   * @example
   * // Delete a few Commissions
   * const { count } = await prisma.commission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CommissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, CommissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Commissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Commissions
   * const commission = await prisma.commission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CommissionUpdateManyArgs>(args: Prisma.SelectSubset<T, CommissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Commissions and returns the data updated in the database.
   * @param {CommissionUpdateManyAndReturnArgs} args - Arguments to update many Commissions.
   * @example
   * // Update many Commissions
   * const commission = await prisma.commission.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Commissions and only return the `id`
   * const commissionWithIdOnly = await prisma.commission.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CommissionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CommissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Commission.
   * @param {CommissionUpsertArgs} args - Arguments to update or create a Commission.
   * @example
   * // Update or create a Commission
   * const commission = await prisma.commission.upsert({
   *   create: {
   *     // ... data to create a Commission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Commission we want to update
   *   }
   * })
   */
  upsert<T extends CommissionUpsertArgs>(args: Prisma.SelectSubset<T, CommissionUpsertArgs<ExtArgs>>): Prisma.Prisma__CommissionClient<runtime.Types.Result.GetResult<Prisma.$CommissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Commissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommissionCountArgs} args - Arguments to filter Commissions to count.
   * @example
   * // Count the number of Commissions
   * const count = await prisma.commission.count({
   *   where: {
   *     // ... the filter for the Commissions we want to count
   *   }
   * })
  **/
  count<T extends CommissionCountArgs>(
    args?: Prisma.Subset<T, CommissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CommissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Commission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CommissionAggregateArgs>(args: Prisma.Subset<T, CommissionAggregateArgs>): Prisma.PrismaPromise<GetCommissionAggregateType<T>>

  /**
   * Group by Commission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CommissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CommissionGroupByArgs['orderBy'] }
      : { orderBy?: CommissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CommissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Commission model
 */
readonly fields: CommissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Commission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CommissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  salesPerson<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Commission model
 */
export interface CommissionFieldRefs {
  readonly id: Prisma.FieldRef<"Commission", 'String'>
  readonly salesPersonId: Prisma.FieldRef<"Commission", 'String'>
  readonly invoiceId: Prisma.FieldRef<"Commission", 'String'>
  readonly amount: Prisma.FieldRef<"Commission", 'Decimal'>
  readonly status: Prisma.FieldRef<"Commission", 'String'>
  readonly createdAt: Prisma.FieldRef<"Commission", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Commission findUnique
 */
export type CommissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * Filter, which Commission to fetch.
   */
  where: Prisma.CommissionWhereUniqueInput
}

/**
 * Commission findUniqueOrThrow
 */
export type CommissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * Filter, which Commission to fetch.
   */
  where: Prisma.CommissionWhereUniqueInput
}

/**
 * Commission findFirst
 */
export type CommissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * Filter, which Commission to fetch.
   */
  where?: Prisma.CommissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Commissions to fetch.
   */
  orderBy?: Prisma.CommissionOrderByWithRelationInput | Prisma.CommissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Commissions.
   */
  cursor?: Prisma.CommissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Commissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Commissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Commissions.
   */
  distinct?: Prisma.CommissionScalarFieldEnum | Prisma.CommissionScalarFieldEnum[]
}

/**
 * Commission findFirstOrThrow
 */
export type CommissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * Filter, which Commission to fetch.
   */
  where?: Prisma.CommissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Commissions to fetch.
   */
  orderBy?: Prisma.CommissionOrderByWithRelationInput | Prisma.CommissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Commissions.
   */
  cursor?: Prisma.CommissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Commissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Commissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Commissions.
   */
  distinct?: Prisma.CommissionScalarFieldEnum | Prisma.CommissionScalarFieldEnum[]
}

/**
 * Commission findMany
 */
export type CommissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * Filter, which Commissions to fetch.
   */
  where?: Prisma.CommissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Commissions to fetch.
   */
  orderBy?: Prisma.CommissionOrderByWithRelationInput | Prisma.CommissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Commissions.
   */
  cursor?: Prisma.CommissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Commissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Commissions.
   */
  skip?: number
  distinct?: Prisma.CommissionScalarFieldEnum | Prisma.CommissionScalarFieldEnum[]
}

/**
 * Commission create
 */
export type CommissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * The data needed to create a Commission.
   */
  data: Prisma.XOR<Prisma.CommissionCreateInput, Prisma.CommissionUncheckedCreateInput>
}

/**
 * Commission createMany
 */
export type CommissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Commissions.
   */
  data: Prisma.CommissionCreateManyInput | Prisma.CommissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Commission createManyAndReturn
 */
export type CommissionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * The data used to create many Commissions.
   */
  data: Prisma.CommissionCreateManyInput | Prisma.CommissionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Commission update
 */
export type CommissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * The data needed to update a Commission.
   */
  data: Prisma.XOR<Prisma.CommissionUpdateInput, Prisma.CommissionUncheckedUpdateInput>
  /**
   * Choose, which Commission to update.
   */
  where: Prisma.CommissionWhereUniqueInput
}

/**
 * Commission updateMany
 */
export type CommissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Commissions.
   */
  data: Prisma.XOR<Prisma.CommissionUpdateManyMutationInput, Prisma.CommissionUncheckedUpdateManyInput>
  /**
   * Filter which Commissions to update
   */
  where?: Prisma.CommissionWhereInput
  /**
   * Limit how many Commissions to update.
   */
  limit?: number
}

/**
 * Commission updateManyAndReturn
 */
export type CommissionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * The data used to update Commissions.
   */
  data: Prisma.XOR<Prisma.CommissionUpdateManyMutationInput, Prisma.CommissionUncheckedUpdateManyInput>
  /**
   * Filter which Commissions to update
   */
  where?: Prisma.CommissionWhereInput
  /**
   * Limit how many Commissions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Commission upsert
 */
export type CommissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * The filter to search for the Commission to update in case it exists.
   */
  where: Prisma.CommissionWhereUniqueInput
  /**
   * In case the Commission found by the `where` argument doesn't exist, create a new Commission with this data.
   */
  create: Prisma.XOR<Prisma.CommissionCreateInput, Prisma.CommissionUncheckedCreateInput>
  /**
   * In case the Commission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CommissionUpdateInput, Prisma.CommissionUncheckedUpdateInput>
}

/**
 * Commission delete
 */
export type CommissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
  /**
   * Filter which Commission to delete.
   */
  where: Prisma.CommissionWhereUniqueInput
}

/**
 * Commission deleteMany
 */
export type CommissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Commissions to delete
   */
  where?: Prisma.CommissionWhereInput
  /**
   * Limit how many Commissions to delete.
   */
  limit?: number
}

/**
 * Commission without action
 */
export type CommissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Commission
   */
  select?: Prisma.CommissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Commission
   */
  omit?: Prisma.CommissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommissionInclude<ExtArgs> | null
}
