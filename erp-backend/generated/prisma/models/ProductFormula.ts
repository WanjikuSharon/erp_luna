
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductFormula` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProductFormula
 * 
 */
export type ProductFormulaModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductFormulaPayload>

export type AggregateProductFormula = {
  _count: ProductFormulaCountAggregateOutputType | null
  _min: ProductFormulaMinAggregateOutputType | null
  _max: ProductFormulaMaxAggregateOutputType | null
}

export type ProductFormulaMinAggregateOutputType = {
  id: string | null
  productId: string | null
}

export type ProductFormulaMaxAggregateOutputType = {
  id: string | null
  productId: string | null
}

export type ProductFormulaCountAggregateOutputType = {
  id: number
  productId: number
  _all: number
}


export type ProductFormulaMinAggregateInputType = {
  id?: true
  productId?: true
}

export type ProductFormulaMaxAggregateInputType = {
  id?: true
  productId?: true
}

export type ProductFormulaCountAggregateInputType = {
  id?: true
  productId?: true
  _all?: true
}

export type ProductFormulaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductFormula to aggregate.
   */
  where?: Prisma.ProductFormulaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductFormulas to fetch.
   */
  orderBy?: Prisma.ProductFormulaOrderByWithRelationInput | Prisma.ProductFormulaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductFormulaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductFormulas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductFormulas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductFormulas
  **/
  _count?: true | ProductFormulaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductFormulaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductFormulaMaxAggregateInputType
}

export type GetProductFormulaAggregateType<T extends ProductFormulaAggregateArgs> = {
      [P in keyof T & keyof AggregateProductFormula]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductFormula[P]>
    : Prisma.GetScalarType<T[P], AggregateProductFormula[P]>
}




export type ProductFormulaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductFormulaWhereInput
  orderBy?: Prisma.ProductFormulaOrderByWithAggregationInput | Prisma.ProductFormulaOrderByWithAggregationInput[]
  by: Prisma.ProductFormulaScalarFieldEnum[] | Prisma.ProductFormulaScalarFieldEnum
  having?: Prisma.ProductFormulaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductFormulaCountAggregateInputType | true
  _min?: ProductFormulaMinAggregateInputType
  _max?: ProductFormulaMaxAggregateInputType
}

export type ProductFormulaGroupByOutputType = {
  id: string
  productId: string
  _count: ProductFormulaCountAggregateOutputType | null
  _min: ProductFormulaMinAggregateOutputType | null
  _max: ProductFormulaMaxAggregateOutputType | null
}

type GetProductFormulaGroupByPayload<T extends ProductFormulaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductFormulaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductFormulaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductFormulaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductFormulaGroupByOutputType[P]>
      }
    >
  >



export type ProductFormulaWhereInput = {
  AND?: Prisma.ProductFormulaWhereInput | Prisma.ProductFormulaWhereInput[]
  OR?: Prisma.ProductFormulaWhereInput[]
  NOT?: Prisma.ProductFormulaWhereInput | Prisma.ProductFormulaWhereInput[]
  id?: Prisma.StringFilter<"ProductFormula"> | string
  productId?: Prisma.StringFilter<"ProductFormula"> | string
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  items?: Prisma.FormulaItemListRelationFilter
}

export type ProductFormulaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  product?: Prisma.ProductOrderByWithRelationInput
  items?: Prisma.FormulaItemOrderByRelationAggregateInput
}

export type ProductFormulaWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  productId?: string
  AND?: Prisma.ProductFormulaWhereInput | Prisma.ProductFormulaWhereInput[]
  OR?: Prisma.ProductFormulaWhereInput[]
  NOT?: Prisma.ProductFormulaWhereInput | Prisma.ProductFormulaWhereInput[]
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  items?: Prisma.FormulaItemListRelationFilter
}, "id" | "productId">

export type ProductFormulaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  _count?: Prisma.ProductFormulaCountOrderByAggregateInput
  _max?: Prisma.ProductFormulaMaxOrderByAggregateInput
  _min?: Prisma.ProductFormulaMinOrderByAggregateInput
}

export type ProductFormulaScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductFormulaScalarWhereWithAggregatesInput | Prisma.ProductFormulaScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductFormulaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductFormulaScalarWhereWithAggregatesInput | Prisma.ProductFormulaScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductFormula"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductFormula"> | string
}

export type ProductFormulaCreateInput = {
  id?: string
  product: Prisma.ProductCreateNestedOneWithoutFormulaInput
  items?: Prisma.FormulaItemCreateNestedManyWithoutFormulaInput
}

export type ProductFormulaUncheckedCreateInput = {
  id?: string
  productId: string
  items?: Prisma.FormulaItemUncheckedCreateNestedManyWithoutFormulaInput
}

export type ProductFormulaUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  product?: Prisma.ProductUpdateOneRequiredWithoutFormulaNestedInput
  items?: Prisma.FormulaItemUpdateManyWithoutFormulaNestedInput
}

export type ProductFormulaUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  items?: Prisma.FormulaItemUncheckedUpdateManyWithoutFormulaNestedInput
}

export type ProductFormulaCreateManyInput = {
  id?: string
  productId: string
}

export type ProductFormulaUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProductFormulaUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProductFormulaNullableScalarRelationFilter = {
  is?: Prisma.ProductFormulaWhereInput | null
  isNot?: Prisma.ProductFormulaWhereInput | null
}

export type ProductFormulaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type ProductFormulaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type ProductFormulaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type ProductFormulaScalarRelationFilter = {
  is?: Prisma.ProductFormulaWhereInput
  isNot?: Prisma.ProductFormulaWhereInput
}

export type ProductFormulaCreateNestedOneWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductFormulaCreateWithoutProductInput, Prisma.ProductFormulaUncheckedCreateWithoutProductInput>
  connectOrCreate?: Prisma.ProductFormulaCreateOrConnectWithoutProductInput
  connect?: Prisma.ProductFormulaWhereUniqueInput
}

export type ProductFormulaUncheckedCreateNestedOneWithoutProductInput = {
  create?: Prisma.XOR<Prisma.ProductFormulaCreateWithoutProductInput, Prisma.ProductFormulaUncheckedCreateWithoutProductInput>
  connectOrCreate?: Prisma.ProductFormulaCreateOrConnectWithoutProductInput
  connect?: Prisma.ProductFormulaWhereUniqueInput
}

export type ProductFormulaUpdateOneWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductFormulaCreateWithoutProductInput, Prisma.ProductFormulaUncheckedCreateWithoutProductInput>
  connectOrCreate?: Prisma.ProductFormulaCreateOrConnectWithoutProductInput
  upsert?: Prisma.ProductFormulaUpsertWithoutProductInput
  disconnect?: Prisma.ProductFormulaWhereInput | boolean
  delete?: Prisma.ProductFormulaWhereInput | boolean
  connect?: Prisma.ProductFormulaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductFormulaUpdateToOneWithWhereWithoutProductInput, Prisma.ProductFormulaUpdateWithoutProductInput>, Prisma.ProductFormulaUncheckedUpdateWithoutProductInput>
}

export type ProductFormulaUncheckedUpdateOneWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.ProductFormulaCreateWithoutProductInput, Prisma.ProductFormulaUncheckedCreateWithoutProductInput>
  connectOrCreate?: Prisma.ProductFormulaCreateOrConnectWithoutProductInput
  upsert?: Prisma.ProductFormulaUpsertWithoutProductInput
  disconnect?: Prisma.ProductFormulaWhereInput | boolean
  delete?: Prisma.ProductFormulaWhereInput | boolean
  connect?: Prisma.ProductFormulaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductFormulaUpdateToOneWithWhereWithoutProductInput, Prisma.ProductFormulaUpdateWithoutProductInput>, Prisma.ProductFormulaUncheckedUpdateWithoutProductInput>
}

export type ProductFormulaCreateNestedOneWithoutItemsInput = {
  create?: Prisma.XOR<Prisma.ProductFormulaCreateWithoutItemsInput, Prisma.ProductFormulaUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.ProductFormulaCreateOrConnectWithoutItemsInput
  connect?: Prisma.ProductFormulaWhereUniqueInput
}

export type ProductFormulaUpdateOneRequiredWithoutItemsNestedInput = {
  create?: Prisma.XOR<Prisma.ProductFormulaCreateWithoutItemsInput, Prisma.ProductFormulaUncheckedCreateWithoutItemsInput>
  connectOrCreate?: Prisma.ProductFormulaCreateOrConnectWithoutItemsInput
  upsert?: Prisma.ProductFormulaUpsertWithoutItemsInput
  connect?: Prisma.ProductFormulaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProductFormulaUpdateToOneWithWhereWithoutItemsInput, Prisma.ProductFormulaUpdateWithoutItemsInput>, Prisma.ProductFormulaUncheckedUpdateWithoutItemsInput>
}

export type ProductFormulaCreateWithoutProductInput = {
  id?: string
  items?: Prisma.FormulaItemCreateNestedManyWithoutFormulaInput
}

export type ProductFormulaUncheckedCreateWithoutProductInput = {
  id?: string
  items?: Prisma.FormulaItemUncheckedCreateNestedManyWithoutFormulaInput
}

export type ProductFormulaCreateOrConnectWithoutProductInput = {
  where: Prisma.ProductFormulaWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductFormulaCreateWithoutProductInput, Prisma.ProductFormulaUncheckedCreateWithoutProductInput>
}

export type ProductFormulaUpsertWithoutProductInput = {
  update: Prisma.XOR<Prisma.ProductFormulaUpdateWithoutProductInput, Prisma.ProductFormulaUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.ProductFormulaCreateWithoutProductInput, Prisma.ProductFormulaUncheckedCreateWithoutProductInput>
  where?: Prisma.ProductFormulaWhereInput
}

export type ProductFormulaUpdateToOneWithWhereWithoutProductInput = {
  where?: Prisma.ProductFormulaWhereInput
  data: Prisma.XOR<Prisma.ProductFormulaUpdateWithoutProductInput, Prisma.ProductFormulaUncheckedUpdateWithoutProductInput>
}

export type ProductFormulaUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  items?: Prisma.FormulaItemUpdateManyWithoutFormulaNestedInput
}

export type ProductFormulaUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  items?: Prisma.FormulaItemUncheckedUpdateManyWithoutFormulaNestedInput
}

export type ProductFormulaCreateWithoutItemsInput = {
  id?: string
  product: Prisma.ProductCreateNestedOneWithoutFormulaInput
}

export type ProductFormulaUncheckedCreateWithoutItemsInput = {
  id?: string
  productId: string
}

export type ProductFormulaCreateOrConnectWithoutItemsInput = {
  where: Prisma.ProductFormulaWhereUniqueInput
  create: Prisma.XOR<Prisma.ProductFormulaCreateWithoutItemsInput, Prisma.ProductFormulaUncheckedCreateWithoutItemsInput>
}

export type ProductFormulaUpsertWithoutItemsInput = {
  update: Prisma.XOR<Prisma.ProductFormulaUpdateWithoutItemsInput, Prisma.ProductFormulaUncheckedUpdateWithoutItemsInput>
  create: Prisma.XOR<Prisma.ProductFormulaCreateWithoutItemsInput, Prisma.ProductFormulaUncheckedCreateWithoutItemsInput>
  where?: Prisma.ProductFormulaWhereInput
}

export type ProductFormulaUpdateToOneWithWhereWithoutItemsInput = {
  where?: Prisma.ProductFormulaWhereInput
  data: Prisma.XOR<Prisma.ProductFormulaUpdateWithoutItemsInput, Prisma.ProductFormulaUncheckedUpdateWithoutItemsInput>
}

export type ProductFormulaUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  product?: Prisma.ProductUpdateOneRequiredWithoutFormulaNestedInput
}

export type ProductFormulaUncheckedUpdateWithoutItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ProductFormulaCountOutputType
 */

export type ProductFormulaCountOutputType = {
  items: number
}

export type ProductFormulaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  items?: boolean | ProductFormulaCountOutputTypeCountItemsArgs
}

/**
 * ProductFormulaCountOutputType without action
 */
export type ProductFormulaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormulaCountOutputType
   */
  select?: Prisma.ProductFormulaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProductFormulaCountOutputType without action
 */
export type ProductFormulaCountOutputTypeCountItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FormulaItemWhereInput
}


export type ProductFormulaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  items?: boolean | Prisma.ProductFormula$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductFormulaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productFormula"]>

export type ProductFormulaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productFormula"]>

export type ProductFormulaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["productFormula"]>

export type ProductFormulaSelectScalar = {
  id?: boolean
  productId?: boolean
}

export type ProductFormulaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId", ExtArgs["result"]["productFormula"]>
export type ProductFormulaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  items?: boolean | Prisma.ProductFormula$itemsArgs<ExtArgs>
  _count?: boolean | Prisma.ProductFormulaCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProductFormulaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type ProductFormulaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $ProductFormulaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductFormula"
  objects: {
    product: Prisma.$ProductPayload<ExtArgs>
    items: Prisma.$FormulaItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
  }, ExtArgs["result"]["productFormula"]>
  composites: {}
}

export type ProductFormulaGetPayload<S extends boolean | null | undefined | ProductFormulaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload, S>

export type ProductFormulaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductFormulaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductFormulaCountAggregateInputType | true
  }

export interface ProductFormulaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductFormula'], meta: { name: 'ProductFormula' } }
  /**
   * Find zero or one ProductFormula that matches the filter.
   * @param {ProductFormulaFindUniqueArgs} args - Arguments to find a ProductFormula
   * @example
   * // Get one ProductFormula
   * const productFormula = await prisma.productFormula.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductFormulaFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductFormulaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductFormula that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductFormulaFindUniqueOrThrowArgs} args - Arguments to find a ProductFormula
   * @example
   * // Get one ProductFormula
   * const productFormula = await prisma.productFormula.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductFormulaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductFormulaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductFormula that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductFormulaFindFirstArgs} args - Arguments to find a ProductFormula
   * @example
   * // Get one ProductFormula
   * const productFormula = await prisma.productFormula.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductFormulaFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductFormulaFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductFormula that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductFormulaFindFirstOrThrowArgs} args - Arguments to find a ProductFormula
   * @example
   * // Get one ProductFormula
   * const productFormula = await prisma.productFormula.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductFormulaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductFormulaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductFormulas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductFormulaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductFormulas
   * const productFormulas = await prisma.productFormula.findMany()
   * 
   * // Get first 10 ProductFormulas
   * const productFormulas = await prisma.productFormula.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productFormulaWithIdOnly = await prisma.productFormula.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductFormulaFindManyArgs>(args?: Prisma.SelectSubset<T, ProductFormulaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductFormula.
   * @param {ProductFormulaCreateArgs} args - Arguments to create a ProductFormula.
   * @example
   * // Create one ProductFormula
   * const ProductFormula = await prisma.productFormula.create({
   *   data: {
   *     // ... data to create a ProductFormula
   *   }
   * })
   * 
   */
  create<T extends ProductFormulaCreateArgs>(args: Prisma.SelectSubset<T, ProductFormulaCreateArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductFormulas.
   * @param {ProductFormulaCreateManyArgs} args - Arguments to create many ProductFormulas.
   * @example
   * // Create many ProductFormulas
   * const productFormula = await prisma.productFormula.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductFormulaCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductFormulaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductFormulas and returns the data saved in the database.
   * @param {ProductFormulaCreateManyAndReturnArgs} args - Arguments to create many ProductFormulas.
   * @example
   * // Create many ProductFormulas
   * const productFormula = await prisma.productFormula.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductFormulas and only return the `id`
   * const productFormulaWithIdOnly = await prisma.productFormula.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductFormulaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductFormulaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductFormula.
   * @param {ProductFormulaDeleteArgs} args - Arguments to delete one ProductFormula.
   * @example
   * // Delete one ProductFormula
   * const ProductFormula = await prisma.productFormula.delete({
   *   where: {
   *     // ... filter to delete one ProductFormula
   *   }
   * })
   * 
   */
  delete<T extends ProductFormulaDeleteArgs>(args: Prisma.SelectSubset<T, ProductFormulaDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductFormula.
   * @param {ProductFormulaUpdateArgs} args - Arguments to update one ProductFormula.
   * @example
   * // Update one ProductFormula
   * const productFormula = await prisma.productFormula.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductFormulaUpdateArgs>(args: Prisma.SelectSubset<T, ProductFormulaUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductFormulas.
   * @param {ProductFormulaDeleteManyArgs} args - Arguments to filter ProductFormulas to delete.
   * @example
   * // Delete a few ProductFormulas
   * const { count } = await prisma.productFormula.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductFormulaDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductFormulaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductFormulas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductFormulaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductFormulas
   * const productFormula = await prisma.productFormula.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductFormulaUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductFormulaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductFormulas and returns the data updated in the database.
   * @param {ProductFormulaUpdateManyAndReturnArgs} args - Arguments to update many ProductFormulas.
   * @example
   * // Update many ProductFormulas
   * const productFormula = await prisma.productFormula.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductFormulas and only return the `id`
   * const productFormulaWithIdOnly = await prisma.productFormula.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductFormulaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductFormulaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductFormula.
   * @param {ProductFormulaUpsertArgs} args - Arguments to update or create a ProductFormula.
   * @example
   * // Update or create a ProductFormula
   * const productFormula = await prisma.productFormula.upsert({
   *   create: {
   *     // ... data to create a ProductFormula
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductFormula we want to update
   *   }
   * })
   */
  upsert<T extends ProductFormulaUpsertArgs>(args: Prisma.SelectSubset<T, ProductFormulaUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductFormulaClient<runtime.Types.Result.GetResult<Prisma.$ProductFormulaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductFormulas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductFormulaCountArgs} args - Arguments to filter ProductFormulas to count.
   * @example
   * // Count the number of ProductFormulas
   * const count = await prisma.productFormula.count({
   *   where: {
   *     // ... the filter for the ProductFormulas we want to count
   *   }
   * })
  **/
  count<T extends ProductFormulaCountArgs>(
    args?: Prisma.Subset<T, ProductFormulaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductFormulaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductFormula.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductFormulaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductFormulaAggregateArgs>(args: Prisma.Subset<T, ProductFormulaAggregateArgs>): Prisma.PrismaPromise<GetProductFormulaAggregateType<T>>

  /**
   * Group by ProductFormula.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductFormulaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductFormulaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductFormulaGroupByArgs['orderBy'] }
      : { orderBy?: ProductFormulaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductFormulaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductFormulaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductFormula model
 */
readonly fields: ProductFormulaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductFormula.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductFormulaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  items<T extends Prisma.ProductFormula$itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductFormula$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FormulaItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductFormula model
 */
export interface ProductFormulaFieldRefs {
  readonly id: Prisma.FieldRef<"ProductFormula", 'String'>
  readonly productId: Prisma.FieldRef<"ProductFormula", 'String'>
}
    

// Custom InputTypes
/**
 * ProductFormula findUnique
 */
export type ProductFormulaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * Filter, which ProductFormula to fetch.
   */
  where: Prisma.ProductFormulaWhereUniqueInput
}

/**
 * ProductFormula findUniqueOrThrow
 */
export type ProductFormulaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * Filter, which ProductFormula to fetch.
   */
  where: Prisma.ProductFormulaWhereUniqueInput
}

/**
 * ProductFormula findFirst
 */
export type ProductFormulaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * Filter, which ProductFormula to fetch.
   */
  where?: Prisma.ProductFormulaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductFormulas to fetch.
   */
  orderBy?: Prisma.ProductFormulaOrderByWithRelationInput | Prisma.ProductFormulaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductFormulas.
   */
  cursor?: Prisma.ProductFormulaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductFormulas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductFormulas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductFormulas.
   */
  distinct?: Prisma.ProductFormulaScalarFieldEnum | Prisma.ProductFormulaScalarFieldEnum[]
}

/**
 * ProductFormula findFirstOrThrow
 */
export type ProductFormulaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * Filter, which ProductFormula to fetch.
   */
  where?: Prisma.ProductFormulaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductFormulas to fetch.
   */
  orderBy?: Prisma.ProductFormulaOrderByWithRelationInput | Prisma.ProductFormulaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductFormulas.
   */
  cursor?: Prisma.ProductFormulaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductFormulas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductFormulas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductFormulas.
   */
  distinct?: Prisma.ProductFormulaScalarFieldEnum | Prisma.ProductFormulaScalarFieldEnum[]
}

/**
 * ProductFormula findMany
 */
export type ProductFormulaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * Filter, which ProductFormulas to fetch.
   */
  where?: Prisma.ProductFormulaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductFormulas to fetch.
   */
  orderBy?: Prisma.ProductFormulaOrderByWithRelationInput | Prisma.ProductFormulaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductFormulas.
   */
  cursor?: Prisma.ProductFormulaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductFormulas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductFormulas.
   */
  skip?: number
  distinct?: Prisma.ProductFormulaScalarFieldEnum | Prisma.ProductFormulaScalarFieldEnum[]
}

/**
 * ProductFormula create
 */
export type ProductFormulaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * The data needed to create a ProductFormula.
   */
  data: Prisma.XOR<Prisma.ProductFormulaCreateInput, Prisma.ProductFormulaUncheckedCreateInput>
}

/**
 * ProductFormula createMany
 */
export type ProductFormulaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductFormulas.
   */
  data: Prisma.ProductFormulaCreateManyInput | Prisma.ProductFormulaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductFormula createManyAndReturn
 */
export type ProductFormulaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * The data used to create many ProductFormulas.
   */
  data: Prisma.ProductFormulaCreateManyInput | Prisma.ProductFormulaCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProductFormula update
 */
export type ProductFormulaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * The data needed to update a ProductFormula.
   */
  data: Prisma.XOR<Prisma.ProductFormulaUpdateInput, Prisma.ProductFormulaUncheckedUpdateInput>
  /**
   * Choose, which ProductFormula to update.
   */
  where: Prisma.ProductFormulaWhereUniqueInput
}

/**
 * ProductFormula updateMany
 */
export type ProductFormulaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductFormulas.
   */
  data: Prisma.XOR<Prisma.ProductFormulaUpdateManyMutationInput, Prisma.ProductFormulaUncheckedUpdateManyInput>
  /**
   * Filter which ProductFormulas to update
   */
  where?: Prisma.ProductFormulaWhereInput
  /**
   * Limit how many ProductFormulas to update.
   */
  limit?: number
}

/**
 * ProductFormula updateManyAndReturn
 */
export type ProductFormulaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * The data used to update ProductFormulas.
   */
  data: Prisma.XOR<Prisma.ProductFormulaUpdateManyMutationInput, Prisma.ProductFormulaUncheckedUpdateManyInput>
  /**
   * Filter which ProductFormulas to update
   */
  where?: Prisma.ProductFormulaWhereInput
  /**
   * Limit how many ProductFormulas to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProductFormula upsert
 */
export type ProductFormulaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * The filter to search for the ProductFormula to update in case it exists.
   */
  where: Prisma.ProductFormulaWhereUniqueInput
  /**
   * In case the ProductFormula found by the `where` argument doesn't exist, create a new ProductFormula with this data.
   */
  create: Prisma.XOR<Prisma.ProductFormulaCreateInput, Prisma.ProductFormulaUncheckedCreateInput>
  /**
   * In case the ProductFormula was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductFormulaUpdateInput, Prisma.ProductFormulaUncheckedUpdateInput>
}

/**
 * ProductFormula delete
 */
export type ProductFormulaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
  /**
   * Filter which ProductFormula to delete.
   */
  where: Prisma.ProductFormulaWhereUniqueInput
}

/**
 * ProductFormula deleteMany
 */
export type ProductFormulaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductFormulas to delete
   */
  where?: Prisma.ProductFormulaWhereInput
  /**
   * Limit how many ProductFormulas to delete.
   */
  limit?: number
}

/**
 * ProductFormula.items
 */
export type ProductFormula$itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FormulaItem
   */
  select?: Prisma.FormulaItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FormulaItem
   */
  omit?: Prisma.FormulaItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FormulaItemInclude<ExtArgs> | null
  where?: Prisma.FormulaItemWhereInput
  orderBy?: Prisma.FormulaItemOrderByWithRelationInput | Prisma.FormulaItemOrderByWithRelationInput[]
  cursor?: Prisma.FormulaItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.FormulaItemScalarFieldEnum | Prisma.FormulaItemScalarFieldEnum[]
}

/**
 * ProductFormula without action
 */
export type ProductFormulaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductFormula
   */
  select?: Prisma.ProductFormulaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductFormula
   */
  omit?: Prisma.ProductFormulaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProductFormulaInclude<ExtArgs> | null
}
