
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StockAdjustment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model StockAdjustment
 * 
 */
export type StockAdjustmentModel = runtime.Types.Result.DefaultSelection<Prisma.$StockAdjustmentPayload>

export type AggregateStockAdjustment = {
  _count: StockAdjustmentCountAggregateOutputType | null
  _avg: StockAdjustmentAvgAggregateOutputType | null
  _sum: StockAdjustmentSumAggregateOutputType | null
  _min: StockAdjustmentMinAggregateOutputType | null
  _max: StockAdjustmentMaxAggregateOutputType | null
}

export type StockAdjustmentAvgAggregateOutputType = {
  quantity: runtime.Decimal | null
}

export type StockAdjustmentSumAggregateOutputType = {
  quantity: runtime.Decimal | null
}

export type StockAdjustmentMinAggregateOutputType = {
  id: string | null
  productId: string | null
  rawMaterialId: string | null
  quantity: runtime.Decimal | null
  reason: string | null
  adjustedById: string | null
  createdAt: Date | null
}

export type StockAdjustmentMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  rawMaterialId: string | null
  quantity: runtime.Decimal | null
  reason: string | null
  adjustedById: string | null
  createdAt: Date | null
}

export type StockAdjustmentCountAggregateOutputType = {
  id: number
  productId: number
  rawMaterialId: number
  quantity: number
  reason: number
  adjustedById: number
  createdAt: number
  _all: number
}


export type StockAdjustmentAvgAggregateInputType = {
  quantity?: true
}

export type StockAdjustmentSumAggregateInputType = {
  quantity?: true
}

export type StockAdjustmentMinAggregateInputType = {
  id?: true
  productId?: true
  rawMaterialId?: true
  quantity?: true
  reason?: true
  adjustedById?: true
  createdAt?: true
}

export type StockAdjustmentMaxAggregateInputType = {
  id?: true
  productId?: true
  rawMaterialId?: true
  quantity?: true
  reason?: true
  adjustedById?: true
  createdAt?: true
}

export type StockAdjustmentCountAggregateInputType = {
  id?: true
  productId?: true
  rawMaterialId?: true
  quantity?: true
  reason?: true
  adjustedById?: true
  createdAt?: true
  _all?: true
}

export type StockAdjustmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockAdjustment to aggregate.
   */
  where?: Prisma.StockAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockAdjustments to fetch.
   */
  orderBy?: Prisma.StockAdjustmentOrderByWithRelationInput | Prisma.StockAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StockAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockAdjustments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StockAdjustments
  **/
  _count?: true | StockAdjustmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: StockAdjustmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: StockAdjustmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StockAdjustmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StockAdjustmentMaxAggregateInputType
}

export type GetStockAdjustmentAggregateType<T extends StockAdjustmentAggregateArgs> = {
      [P in keyof T & keyof AggregateStockAdjustment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStockAdjustment[P]>
    : Prisma.GetScalarType<T[P], AggregateStockAdjustment[P]>
}




export type StockAdjustmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StockAdjustmentWhereInput
  orderBy?: Prisma.StockAdjustmentOrderByWithAggregationInput | Prisma.StockAdjustmentOrderByWithAggregationInput[]
  by: Prisma.StockAdjustmentScalarFieldEnum[] | Prisma.StockAdjustmentScalarFieldEnum
  having?: Prisma.StockAdjustmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StockAdjustmentCountAggregateInputType | true
  _avg?: StockAdjustmentAvgAggregateInputType
  _sum?: StockAdjustmentSumAggregateInputType
  _min?: StockAdjustmentMinAggregateInputType
  _max?: StockAdjustmentMaxAggregateInputType
}

export type StockAdjustmentGroupByOutputType = {
  id: string
  productId: string | null
  rawMaterialId: string | null
  quantity: runtime.Decimal
  reason: string
  adjustedById: string
  createdAt: Date
  _count: StockAdjustmentCountAggregateOutputType | null
  _avg: StockAdjustmentAvgAggregateOutputType | null
  _sum: StockAdjustmentSumAggregateOutputType | null
  _min: StockAdjustmentMinAggregateOutputType | null
  _max: StockAdjustmentMaxAggregateOutputType | null
}

type GetStockAdjustmentGroupByPayload<T extends StockAdjustmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StockAdjustmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StockAdjustmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StockAdjustmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StockAdjustmentGroupByOutputType[P]>
      }
    >
  >



export type StockAdjustmentWhereInput = {
  AND?: Prisma.StockAdjustmentWhereInput | Prisma.StockAdjustmentWhereInput[]
  OR?: Prisma.StockAdjustmentWhereInput[]
  NOT?: Prisma.StockAdjustmentWhereInput | Prisma.StockAdjustmentWhereInput[]
  id?: Prisma.StringFilter<"StockAdjustment"> | string
  productId?: Prisma.StringNullableFilter<"StockAdjustment"> | string | null
  rawMaterialId?: Prisma.StringNullableFilter<"StockAdjustment"> | string | null
  quantity?: Prisma.DecimalFilter<"StockAdjustment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFilter<"StockAdjustment"> | string
  adjustedById?: Prisma.StringFilter<"StockAdjustment"> | string
  createdAt?: Prisma.DateTimeFilter<"StockAdjustment"> | Date | string
  adjustedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type StockAdjustmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrderInput | Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrderInput | Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  adjustedById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  adjustedBy?: Prisma.UserOrderByWithRelationInput
}

export type StockAdjustmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.StockAdjustmentWhereInput | Prisma.StockAdjustmentWhereInput[]
  OR?: Prisma.StockAdjustmentWhereInput[]
  NOT?: Prisma.StockAdjustmentWhereInput | Prisma.StockAdjustmentWhereInput[]
  productId?: Prisma.StringNullableFilter<"StockAdjustment"> | string | null
  rawMaterialId?: Prisma.StringNullableFilter<"StockAdjustment"> | string | null
  quantity?: Prisma.DecimalFilter<"StockAdjustment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFilter<"StockAdjustment"> | string
  adjustedById?: Prisma.StringFilter<"StockAdjustment"> | string
  createdAt?: Prisma.DateTimeFilter<"StockAdjustment"> | Date | string
  adjustedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type StockAdjustmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrderInput | Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrderInput | Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  adjustedById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.StockAdjustmentCountOrderByAggregateInput
  _avg?: Prisma.StockAdjustmentAvgOrderByAggregateInput
  _max?: Prisma.StockAdjustmentMaxOrderByAggregateInput
  _min?: Prisma.StockAdjustmentMinOrderByAggregateInput
  _sum?: Prisma.StockAdjustmentSumOrderByAggregateInput
}

export type StockAdjustmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.StockAdjustmentScalarWhereWithAggregatesInput | Prisma.StockAdjustmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.StockAdjustmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StockAdjustmentScalarWhereWithAggregatesInput | Prisma.StockAdjustmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StockAdjustment"> | string
  productId?: Prisma.StringNullableWithAggregatesFilter<"StockAdjustment"> | string | null
  rawMaterialId?: Prisma.StringNullableWithAggregatesFilter<"StockAdjustment"> | string | null
  quantity?: Prisma.DecimalWithAggregatesFilter<"StockAdjustment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringWithAggregatesFilter<"StockAdjustment"> | string
  adjustedById?: Prisma.StringWithAggregatesFilter<"StockAdjustment"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StockAdjustment"> | Date | string
}

export type StockAdjustmentCreateInput = {
  id?: string
  productId?: string | null
  rawMaterialId?: string | null
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  reason: string
  createdAt?: Date | string
  adjustedBy: Prisma.UserCreateNestedOneWithoutAdjustmentsInput
}

export type StockAdjustmentUncheckedCreateInput = {
  id?: string
  productId?: string | null
  rawMaterialId?: string | null
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  reason: string
  adjustedById: string
  createdAt?: Date | string
}

export type StockAdjustmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rawMaterialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  adjustedBy?: Prisma.UserUpdateOneRequiredWithoutAdjustmentsNestedInput
}

export type StockAdjustmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rawMaterialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  adjustedById?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockAdjustmentCreateManyInput = {
  id?: string
  productId?: string | null
  rawMaterialId?: string | null
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  reason: string
  adjustedById: string
  createdAt?: Date | string
}

export type StockAdjustmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rawMaterialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockAdjustmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rawMaterialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  adjustedById?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockAdjustmentListRelationFilter = {
  every?: Prisma.StockAdjustmentWhereInput
  some?: Prisma.StockAdjustmentWhereInput
  none?: Prisma.StockAdjustmentWhereInput
}

export type StockAdjustmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StockAdjustmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  adjustedById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StockAdjustmentAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type StockAdjustmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  adjustedById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StockAdjustmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  rawMaterialId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  adjustedById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StockAdjustmentSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type StockAdjustmentCreateNestedManyWithoutAdjustedByInput = {
  create?: Prisma.XOR<Prisma.StockAdjustmentCreateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput> | Prisma.StockAdjustmentCreateWithoutAdjustedByInput[] | Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput[]
  connectOrCreate?: Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput | Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput[]
  createMany?: Prisma.StockAdjustmentCreateManyAdjustedByInputEnvelope
  connect?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
}

export type StockAdjustmentUncheckedCreateNestedManyWithoutAdjustedByInput = {
  create?: Prisma.XOR<Prisma.StockAdjustmentCreateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput> | Prisma.StockAdjustmentCreateWithoutAdjustedByInput[] | Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput[]
  connectOrCreate?: Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput | Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput[]
  createMany?: Prisma.StockAdjustmentCreateManyAdjustedByInputEnvelope
  connect?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
}

export type StockAdjustmentUpdateManyWithoutAdjustedByNestedInput = {
  create?: Prisma.XOR<Prisma.StockAdjustmentCreateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput> | Prisma.StockAdjustmentCreateWithoutAdjustedByInput[] | Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput[]
  connectOrCreate?: Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput | Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput[]
  upsert?: Prisma.StockAdjustmentUpsertWithWhereUniqueWithoutAdjustedByInput | Prisma.StockAdjustmentUpsertWithWhereUniqueWithoutAdjustedByInput[]
  createMany?: Prisma.StockAdjustmentCreateManyAdjustedByInputEnvelope
  set?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  disconnect?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  delete?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  connect?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  update?: Prisma.StockAdjustmentUpdateWithWhereUniqueWithoutAdjustedByInput | Prisma.StockAdjustmentUpdateWithWhereUniqueWithoutAdjustedByInput[]
  updateMany?: Prisma.StockAdjustmentUpdateManyWithWhereWithoutAdjustedByInput | Prisma.StockAdjustmentUpdateManyWithWhereWithoutAdjustedByInput[]
  deleteMany?: Prisma.StockAdjustmentScalarWhereInput | Prisma.StockAdjustmentScalarWhereInput[]
}

export type StockAdjustmentUncheckedUpdateManyWithoutAdjustedByNestedInput = {
  create?: Prisma.XOR<Prisma.StockAdjustmentCreateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput> | Prisma.StockAdjustmentCreateWithoutAdjustedByInput[] | Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput[]
  connectOrCreate?: Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput | Prisma.StockAdjustmentCreateOrConnectWithoutAdjustedByInput[]
  upsert?: Prisma.StockAdjustmentUpsertWithWhereUniqueWithoutAdjustedByInput | Prisma.StockAdjustmentUpsertWithWhereUniqueWithoutAdjustedByInput[]
  createMany?: Prisma.StockAdjustmentCreateManyAdjustedByInputEnvelope
  set?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  disconnect?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  delete?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  connect?: Prisma.StockAdjustmentWhereUniqueInput | Prisma.StockAdjustmentWhereUniqueInput[]
  update?: Prisma.StockAdjustmentUpdateWithWhereUniqueWithoutAdjustedByInput | Prisma.StockAdjustmentUpdateWithWhereUniqueWithoutAdjustedByInput[]
  updateMany?: Prisma.StockAdjustmentUpdateManyWithWhereWithoutAdjustedByInput | Prisma.StockAdjustmentUpdateManyWithWhereWithoutAdjustedByInput[]
  deleteMany?: Prisma.StockAdjustmentScalarWhereInput | Prisma.StockAdjustmentScalarWhereInput[]
}

export type StockAdjustmentCreateWithoutAdjustedByInput = {
  id?: string
  productId?: string | null
  rawMaterialId?: string | null
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  reason: string
  createdAt?: Date | string
}

export type StockAdjustmentUncheckedCreateWithoutAdjustedByInput = {
  id?: string
  productId?: string | null
  rawMaterialId?: string | null
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  reason: string
  createdAt?: Date | string
}

export type StockAdjustmentCreateOrConnectWithoutAdjustedByInput = {
  where: Prisma.StockAdjustmentWhereUniqueInput
  create: Prisma.XOR<Prisma.StockAdjustmentCreateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput>
}

export type StockAdjustmentCreateManyAdjustedByInputEnvelope = {
  data: Prisma.StockAdjustmentCreateManyAdjustedByInput | Prisma.StockAdjustmentCreateManyAdjustedByInput[]
  skipDuplicates?: boolean
}

export type StockAdjustmentUpsertWithWhereUniqueWithoutAdjustedByInput = {
  where: Prisma.StockAdjustmentWhereUniqueInput
  update: Prisma.XOR<Prisma.StockAdjustmentUpdateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedUpdateWithoutAdjustedByInput>
  create: Prisma.XOR<Prisma.StockAdjustmentCreateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedCreateWithoutAdjustedByInput>
}

export type StockAdjustmentUpdateWithWhereUniqueWithoutAdjustedByInput = {
  where: Prisma.StockAdjustmentWhereUniqueInput
  data: Prisma.XOR<Prisma.StockAdjustmentUpdateWithoutAdjustedByInput, Prisma.StockAdjustmentUncheckedUpdateWithoutAdjustedByInput>
}

export type StockAdjustmentUpdateManyWithWhereWithoutAdjustedByInput = {
  where: Prisma.StockAdjustmentScalarWhereInput
  data: Prisma.XOR<Prisma.StockAdjustmentUpdateManyMutationInput, Prisma.StockAdjustmentUncheckedUpdateManyWithoutAdjustedByInput>
}

export type StockAdjustmentScalarWhereInput = {
  AND?: Prisma.StockAdjustmentScalarWhereInput | Prisma.StockAdjustmentScalarWhereInput[]
  OR?: Prisma.StockAdjustmentScalarWhereInput[]
  NOT?: Prisma.StockAdjustmentScalarWhereInput | Prisma.StockAdjustmentScalarWhereInput[]
  id?: Prisma.StringFilter<"StockAdjustment"> | string
  productId?: Prisma.StringNullableFilter<"StockAdjustment"> | string | null
  rawMaterialId?: Prisma.StringNullableFilter<"StockAdjustment"> | string | null
  quantity?: Prisma.DecimalFilter<"StockAdjustment"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFilter<"StockAdjustment"> | string
  adjustedById?: Prisma.StringFilter<"StockAdjustment"> | string
  createdAt?: Prisma.DateTimeFilter<"StockAdjustment"> | Date | string
}

export type StockAdjustmentCreateManyAdjustedByInput = {
  id?: string
  productId?: string | null
  rawMaterialId?: string | null
  quantity: runtime.Decimal | runtime.DecimalJsLike | number | string
  reason: string
  createdAt?: Date | string
}

export type StockAdjustmentUpdateWithoutAdjustedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rawMaterialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockAdjustmentUncheckedUpdateWithoutAdjustedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rawMaterialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockAdjustmentUncheckedUpdateManyWithoutAdjustedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  rawMaterialId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  quantity?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  reason?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type StockAdjustmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  reason?: boolean
  adjustedById?: boolean
  createdAt?: boolean
  adjustedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["stockAdjustment"]>

export type StockAdjustmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  reason?: boolean
  adjustedById?: boolean
  createdAt?: boolean
  adjustedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["stockAdjustment"]>

export type StockAdjustmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  reason?: boolean
  adjustedById?: boolean
  createdAt?: boolean
  adjustedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["stockAdjustment"]>

export type StockAdjustmentSelectScalar = {
  id?: boolean
  productId?: boolean
  rawMaterialId?: boolean
  quantity?: boolean
  reason?: boolean
  adjustedById?: boolean
  createdAt?: boolean
}

export type StockAdjustmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "rawMaterialId" | "quantity" | "reason" | "adjustedById" | "createdAt", ExtArgs["result"]["stockAdjustment"]>
export type StockAdjustmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  adjustedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type StockAdjustmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  adjustedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type StockAdjustmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  adjustedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $StockAdjustmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StockAdjustment"
  objects: {
    adjustedBy: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string | null
    rawMaterialId: string | null
    quantity: runtime.Decimal
    reason: string
    adjustedById: string
    createdAt: Date
  }, ExtArgs["result"]["stockAdjustment"]>
  composites: {}
}

export type StockAdjustmentGetPayload<S extends boolean | null | undefined | StockAdjustmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload, S>

export type StockAdjustmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StockAdjustmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StockAdjustmentCountAggregateInputType | true
  }

export interface StockAdjustmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockAdjustment'], meta: { name: 'StockAdjustment' } }
  /**
   * Find zero or one StockAdjustment that matches the filter.
   * @param {StockAdjustmentFindUniqueArgs} args - Arguments to find a StockAdjustment
   * @example
   * // Get one StockAdjustment
   * const stockAdjustment = await prisma.stockAdjustment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StockAdjustmentFindUniqueArgs>(args: Prisma.SelectSubset<T, StockAdjustmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StockAdjustment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StockAdjustmentFindUniqueOrThrowArgs} args - Arguments to find a StockAdjustment
   * @example
   * // Get one StockAdjustment
   * const stockAdjustment = await prisma.stockAdjustment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StockAdjustmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StockAdjustmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockAdjustment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockAdjustmentFindFirstArgs} args - Arguments to find a StockAdjustment
   * @example
   * // Get one StockAdjustment
   * const stockAdjustment = await prisma.stockAdjustment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StockAdjustmentFindFirstArgs>(args?: Prisma.SelectSubset<T, StockAdjustmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockAdjustment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockAdjustmentFindFirstOrThrowArgs} args - Arguments to find a StockAdjustment
   * @example
   * // Get one StockAdjustment
   * const stockAdjustment = await prisma.stockAdjustment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StockAdjustmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StockAdjustmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StockAdjustments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockAdjustmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StockAdjustments
   * const stockAdjustments = await prisma.stockAdjustment.findMany()
   * 
   * // Get first 10 StockAdjustments
   * const stockAdjustments = await prisma.stockAdjustment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const stockAdjustmentWithIdOnly = await prisma.stockAdjustment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StockAdjustmentFindManyArgs>(args?: Prisma.SelectSubset<T, StockAdjustmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StockAdjustment.
   * @param {StockAdjustmentCreateArgs} args - Arguments to create a StockAdjustment.
   * @example
   * // Create one StockAdjustment
   * const StockAdjustment = await prisma.stockAdjustment.create({
   *   data: {
   *     // ... data to create a StockAdjustment
   *   }
   * })
   * 
   */
  create<T extends StockAdjustmentCreateArgs>(args: Prisma.SelectSubset<T, StockAdjustmentCreateArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StockAdjustments.
   * @param {StockAdjustmentCreateManyArgs} args - Arguments to create many StockAdjustments.
   * @example
   * // Create many StockAdjustments
   * const stockAdjustment = await prisma.stockAdjustment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StockAdjustmentCreateManyArgs>(args?: Prisma.SelectSubset<T, StockAdjustmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StockAdjustments and returns the data saved in the database.
   * @param {StockAdjustmentCreateManyAndReturnArgs} args - Arguments to create many StockAdjustments.
   * @example
   * // Create many StockAdjustments
   * const stockAdjustment = await prisma.stockAdjustment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StockAdjustments and only return the `id`
   * const stockAdjustmentWithIdOnly = await prisma.stockAdjustment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StockAdjustmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StockAdjustmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StockAdjustment.
   * @param {StockAdjustmentDeleteArgs} args - Arguments to delete one StockAdjustment.
   * @example
   * // Delete one StockAdjustment
   * const StockAdjustment = await prisma.stockAdjustment.delete({
   *   where: {
   *     // ... filter to delete one StockAdjustment
   *   }
   * })
   * 
   */
  delete<T extends StockAdjustmentDeleteArgs>(args: Prisma.SelectSubset<T, StockAdjustmentDeleteArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StockAdjustment.
   * @param {StockAdjustmentUpdateArgs} args - Arguments to update one StockAdjustment.
   * @example
   * // Update one StockAdjustment
   * const stockAdjustment = await prisma.stockAdjustment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StockAdjustmentUpdateArgs>(args: Prisma.SelectSubset<T, StockAdjustmentUpdateArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StockAdjustments.
   * @param {StockAdjustmentDeleteManyArgs} args - Arguments to filter StockAdjustments to delete.
   * @example
   * // Delete a few StockAdjustments
   * const { count } = await prisma.stockAdjustment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StockAdjustmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, StockAdjustmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StockAdjustments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockAdjustmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StockAdjustments
   * const stockAdjustment = await prisma.stockAdjustment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StockAdjustmentUpdateManyArgs>(args: Prisma.SelectSubset<T, StockAdjustmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StockAdjustments and returns the data updated in the database.
   * @param {StockAdjustmentUpdateManyAndReturnArgs} args - Arguments to update many StockAdjustments.
   * @example
   * // Update many StockAdjustments
   * const stockAdjustment = await prisma.stockAdjustment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StockAdjustments and only return the `id`
   * const stockAdjustmentWithIdOnly = await prisma.stockAdjustment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StockAdjustmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StockAdjustmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StockAdjustment.
   * @param {StockAdjustmentUpsertArgs} args - Arguments to update or create a StockAdjustment.
   * @example
   * // Update or create a StockAdjustment
   * const stockAdjustment = await prisma.stockAdjustment.upsert({
   *   create: {
   *     // ... data to create a StockAdjustment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StockAdjustment we want to update
   *   }
   * })
   */
  upsert<T extends StockAdjustmentUpsertArgs>(args: Prisma.SelectSubset<T, StockAdjustmentUpsertArgs<ExtArgs>>): Prisma.Prisma__StockAdjustmentClient<runtime.Types.Result.GetResult<Prisma.$StockAdjustmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StockAdjustments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockAdjustmentCountArgs} args - Arguments to filter StockAdjustments to count.
   * @example
   * // Count the number of StockAdjustments
   * const count = await prisma.stockAdjustment.count({
   *   where: {
   *     // ... the filter for the StockAdjustments we want to count
   *   }
   * })
  **/
  count<T extends StockAdjustmentCountArgs>(
    args?: Prisma.Subset<T, StockAdjustmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StockAdjustmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StockAdjustment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockAdjustmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StockAdjustmentAggregateArgs>(args: Prisma.Subset<T, StockAdjustmentAggregateArgs>): Prisma.PrismaPromise<GetStockAdjustmentAggregateType<T>>

  /**
   * Group by StockAdjustment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockAdjustmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StockAdjustmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StockAdjustmentGroupByArgs['orderBy'] }
      : { orderBy?: StockAdjustmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StockAdjustmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockAdjustmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StockAdjustment model
 */
readonly fields: StockAdjustmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StockAdjustment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StockAdjustmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  adjustedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StockAdjustment model
 */
export interface StockAdjustmentFieldRefs {
  readonly id: Prisma.FieldRef<"StockAdjustment", 'String'>
  readonly productId: Prisma.FieldRef<"StockAdjustment", 'String'>
  readonly rawMaterialId: Prisma.FieldRef<"StockAdjustment", 'String'>
  readonly quantity: Prisma.FieldRef<"StockAdjustment", 'Decimal'>
  readonly reason: Prisma.FieldRef<"StockAdjustment", 'String'>
  readonly adjustedById: Prisma.FieldRef<"StockAdjustment", 'String'>
  readonly createdAt: Prisma.FieldRef<"StockAdjustment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StockAdjustment findUnique
 */
export type StockAdjustmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which StockAdjustment to fetch.
   */
  where: Prisma.StockAdjustmentWhereUniqueInput
}

/**
 * StockAdjustment findUniqueOrThrow
 */
export type StockAdjustmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which StockAdjustment to fetch.
   */
  where: Prisma.StockAdjustmentWhereUniqueInput
}

/**
 * StockAdjustment findFirst
 */
export type StockAdjustmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which StockAdjustment to fetch.
   */
  where?: Prisma.StockAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockAdjustments to fetch.
   */
  orderBy?: Prisma.StockAdjustmentOrderByWithRelationInput | Prisma.StockAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockAdjustments.
   */
  cursor?: Prisma.StockAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockAdjustments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockAdjustments.
   */
  distinct?: Prisma.StockAdjustmentScalarFieldEnum | Prisma.StockAdjustmentScalarFieldEnum[]
}

/**
 * StockAdjustment findFirstOrThrow
 */
export type StockAdjustmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which StockAdjustment to fetch.
   */
  where?: Prisma.StockAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockAdjustments to fetch.
   */
  orderBy?: Prisma.StockAdjustmentOrderByWithRelationInput | Prisma.StockAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockAdjustments.
   */
  cursor?: Prisma.StockAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockAdjustments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockAdjustments.
   */
  distinct?: Prisma.StockAdjustmentScalarFieldEnum | Prisma.StockAdjustmentScalarFieldEnum[]
}

/**
 * StockAdjustment findMany
 */
export type StockAdjustmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * Filter, which StockAdjustments to fetch.
   */
  where?: Prisma.StockAdjustmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockAdjustments to fetch.
   */
  orderBy?: Prisma.StockAdjustmentOrderByWithRelationInput | Prisma.StockAdjustmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StockAdjustments.
   */
  cursor?: Prisma.StockAdjustmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockAdjustments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockAdjustments.
   */
  skip?: number
  distinct?: Prisma.StockAdjustmentScalarFieldEnum | Prisma.StockAdjustmentScalarFieldEnum[]
}

/**
 * StockAdjustment create
 */
export type StockAdjustmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * The data needed to create a StockAdjustment.
   */
  data: Prisma.XOR<Prisma.StockAdjustmentCreateInput, Prisma.StockAdjustmentUncheckedCreateInput>
}

/**
 * StockAdjustment createMany
 */
export type StockAdjustmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StockAdjustments.
   */
  data: Prisma.StockAdjustmentCreateManyInput | Prisma.StockAdjustmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StockAdjustment createManyAndReturn
 */
export type StockAdjustmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * The data used to create many StockAdjustments.
   */
  data: Prisma.StockAdjustmentCreateManyInput | Prisma.StockAdjustmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * StockAdjustment update
 */
export type StockAdjustmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * The data needed to update a StockAdjustment.
   */
  data: Prisma.XOR<Prisma.StockAdjustmentUpdateInput, Prisma.StockAdjustmentUncheckedUpdateInput>
  /**
   * Choose, which StockAdjustment to update.
   */
  where: Prisma.StockAdjustmentWhereUniqueInput
}

/**
 * StockAdjustment updateMany
 */
export type StockAdjustmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StockAdjustments.
   */
  data: Prisma.XOR<Prisma.StockAdjustmentUpdateManyMutationInput, Prisma.StockAdjustmentUncheckedUpdateManyInput>
  /**
   * Filter which StockAdjustments to update
   */
  where?: Prisma.StockAdjustmentWhereInput
  /**
   * Limit how many StockAdjustments to update.
   */
  limit?: number
}

/**
 * StockAdjustment updateManyAndReturn
 */
export type StockAdjustmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * The data used to update StockAdjustments.
   */
  data: Prisma.XOR<Prisma.StockAdjustmentUpdateManyMutationInput, Prisma.StockAdjustmentUncheckedUpdateManyInput>
  /**
   * Filter which StockAdjustments to update
   */
  where?: Prisma.StockAdjustmentWhereInput
  /**
   * Limit how many StockAdjustments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * StockAdjustment upsert
 */
export type StockAdjustmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * The filter to search for the StockAdjustment to update in case it exists.
   */
  where: Prisma.StockAdjustmentWhereUniqueInput
  /**
   * In case the StockAdjustment found by the `where` argument doesn't exist, create a new StockAdjustment with this data.
   */
  create: Prisma.XOR<Prisma.StockAdjustmentCreateInput, Prisma.StockAdjustmentUncheckedCreateInput>
  /**
   * In case the StockAdjustment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StockAdjustmentUpdateInput, Prisma.StockAdjustmentUncheckedUpdateInput>
}

/**
 * StockAdjustment delete
 */
export type StockAdjustmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
  /**
   * Filter which StockAdjustment to delete.
   */
  where: Prisma.StockAdjustmentWhereUniqueInput
}

/**
 * StockAdjustment deleteMany
 */
export type StockAdjustmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockAdjustments to delete
   */
  where?: Prisma.StockAdjustmentWhereInput
  /**
   * Limit how many StockAdjustments to delete.
   */
  limit?: number
}

/**
 * StockAdjustment without action
 */
export type StockAdjustmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockAdjustment
   */
  select?: Prisma.StockAdjustmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockAdjustment
   */
  omit?: Prisma.StockAdjustmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockAdjustmentInclude<ExtArgs> | null
}
