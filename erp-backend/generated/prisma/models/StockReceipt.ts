
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StockReceipt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model StockReceipt
 * 
 */
export type StockReceiptModel = runtime.Types.Result.DefaultSelection<Prisma.$StockReceiptPayload>

export type AggregateStockReceipt = {
  _count: StockReceiptCountAggregateOutputType | null
  _min: StockReceiptMinAggregateOutputType | null
  _max: StockReceiptMaxAggregateOutputType | null
}

export type StockReceiptMinAggregateOutputType = {
  id: string | null
  purchaseOrderId: string | null
  receivedById: string | null
  notes: string | null
  createdAt: Date | null
}

export type StockReceiptMaxAggregateOutputType = {
  id: string | null
  purchaseOrderId: string | null
  receivedById: string | null
  notes: string | null
  createdAt: Date | null
}

export type StockReceiptCountAggregateOutputType = {
  id: number
  purchaseOrderId: number
  receivedById: number
  notes: number
  createdAt: number
  _all: number
}


export type StockReceiptMinAggregateInputType = {
  id?: true
  purchaseOrderId?: true
  receivedById?: true
  notes?: true
  createdAt?: true
}

export type StockReceiptMaxAggregateInputType = {
  id?: true
  purchaseOrderId?: true
  receivedById?: true
  notes?: true
  createdAt?: true
}

export type StockReceiptCountAggregateInputType = {
  id?: true
  purchaseOrderId?: true
  receivedById?: true
  notes?: true
  createdAt?: true
  _all?: true
}

export type StockReceiptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockReceipt to aggregate.
   */
  where?: Prisma.StockReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockReceipts to fetch.
   */
  orderBy?: Prisma.StockReceiptOrderByWithRelationInput | Prisma.StockReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StockReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockReceipts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StockReceipts
  **/
  _count?: true | StockReceiptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StockReceiptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StockReceiptMaxAggregateInputType
}

export type GetStockReceiptAggregateType<T extends StockReceiptAggregateArgs> = {
      [P in keyof T & keyof AggregateStockReceipt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStockReceipt[P]>
    : Prisma.GetScalarType<T[P], AggregateStockReceipt[P]>
}




export type StockReceiptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StockReceiptWhereInput
  orderBy?: Prisma.StockReceiptOrderByWithAggregationInput | Prisma.StockReceiptOrderByWithAggregationInput[]
  by: Prisma.StockReceiptScalarFieldEnum[] | Prisma.StockReceiptScalarFieldEnum
  having?: Prisma.StockReceiptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StockReceiptCountAggregateInputType | true
  _min?: StockReceiptMinAggregateInputType
  _max?: StockReceiptMaxAggregateInputType
}

export type StockReceiptGroupByOutputType = {
  id: string
  purchaseOrderId: string | null
  receivedById: string
  notes: string | null
  createdAt: Date
  _count: StockReceiptCountAggregateOutputType | null
  _min: StockReceiptMinAggregateOutputType | null
  _max: StockReceiptMaxAggregateOutputType | null
}

type GetStockReceiptGroupByPayload<T extends StockReceiptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StockReceiptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StockReceiptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StockReceiptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StockReceiptGroupByOutputType[P]>
      }
    >
  >



export type StockReceiptWhereInput = {
  AND?: Prisma.StockReceiptWhereInput | Prisma.StockReceiptWhereInput[]
  OR?: Prisma.StockReceiptWhereInput[]
  NOT?: Prisma.StockReceiptWhereInput | Prisma.StockReceiptWhereInput[]
  id?: Prisma.StringFilter<"StockReceipt"> | string
  purchaseOrderId?: Prisma.StringNullableFilter<"StockReceipt"> | string | null
  receivedById?: Prisma.StringFilter<"StockReceipt"> | string
  notes?: Prisma.StringNullableFilter<"StockReceipt"> | string | null
  createdAt?: Prisma.DateTimeFilter<"StockReceipt"> | Date | string
  purchaseOrder?: Prisma.XOR<Prisma.PurchaseOrderNullableScalarRelationFilter, Prisma.PurchaseOrderWhereInput> | null
}

export type StockReceiptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  purchaseOrderId?: Prisma.SortOrderInput | Prisma.SortOrder
  receivedById?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  purchaseOrder?: Prisma.PurchaseOrderOrderByWithRelationInput
}

export type StockReceiptWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.StockReceiptWhereInput | Prisma.StockReceiptWhereInput[]
  OR?: Prisma.StockReceiptWhereInput[]
  NOT?: Prisma.StockReceiptWhereInput | Prisma.StockReceiptWhereInput[]
  purchaseOrderId?: Prisma.StringNullableFilter<"StockReceipt"> | string | null
  receivedById?: Prisma.StringFilter<"StockReceipt"> | string
  notes?: Prisma.StringNullableFilter<"StockReceipt"> | string | null
  createdAt?: Prisma.DateTimeFilter<"StockReceipt"> | Date | string
  purchaseOrder?: Prisma.XOR<Prisma.PurchaseOrderNullableScalarRelationFilter, Prisma.PurchaseOrderWhereInput> | null
}, "id">

export type StockReceiptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  purchaseOrderId?: Prisma.SortOrderInput | Prisma.SortOrder
  receivedById?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.StockReceiptCountOrderByAggregateInput
  _max?: Prisma.StockReceiptMaxOrderByAggregateInput
  _min?: Prisma.StockReceiptMinOrderByAggregateInput
}

export type StockReceiptScalarWhereWithAggregatesInput = {
  AND?: Prisma.StockReceiptScalarWhereWithAggregatesInput | Prisma.StockReceiptScalarWhereWithAggregatesInput[]
  OR?: Prisma.StockReceiptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StockReceiptScalarWhereWithAggregatesInput | Prisma.StockReceiptScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StockReceipt"> | string
  purchaseOrderId?: Prisma.StringNullableWithAggregatesFilter<"StockReceipt"> | string | null
  receivedById?: Prisma.StringWithAggregatesFilter<"StockReceipt"> | string
  notes?: Prisma.StringNullableWithAggregatesFilter<"StockReceipt"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"StockReceipt"> | Date | string
}

export type StockReceiptCreateInput = {
  id?: string
  receivedById: string
  notes?: string | null
  createdAt?: Date | string
  purchaseOrder?: Prisma.PurchaseOrderCreateNestedOneWithoutReceiptsInput
}

export type StockReceiptUncheckedCreateInput = {
  id?: string
  purchaseOrderId?: string | null
  receivedById: string
  notes?: string | null
  createdAt?: Date | string
}

export type StockReceiptUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receivedById?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseOrder?: Prisma.PurchaseOrderUpdateOneWithoutReceiptsNestedInput
}

export type StockReceiptUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  purchaseOrderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  receivedById?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockReceiptCreateManyInput = {
  id?: string
  purchaseOrderId?: string | null
  receivedById: string
  notes?: string | null
  createdAt?: Date | string
}

export type StockReceiptUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receivedById?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockReceiptUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  purchaseOrderId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  receivedById?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockReceiptListRelationFilter = {
  every?: Prisma.StockReceiptWhereInput
  some?: Prisma.StockReceiptWhereInput
  none?: Prisma.StockReceiptWhereInput
}

export type StockReceiptOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StockReceiptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  purchaseOrderId?: Prisma.SortOrder
  receivedById?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StockReceiptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  purchaseOrderId?: Prisma.SortOrder
  receivedById?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StockReceiptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  purchaseOrderId?: Prisma.SortOrder
  receivedById?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type StockReceiptCreateNestedManyWithoutPurchaseOrderInput = {
  create?: Prisma.XOR<Prisma.StockReceiptCreateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput> | Prisma.StockReceiptCreateWithoutPurchaseOrderInput[] | Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput[]
  connectOrCreate?: Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput | Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput[]
  createMany?: Prisma.StockReceiptCreateManyPurchaseOrderInputEnvelope
  connect?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
}

export type StockReceiptUncheckedCreateNestedManyWithoutPurchaseOrderInput = {
  create?: Prisma.XOR<Prisma.StockReceiptCreateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput> | Prisma.StockReceiptCreateWithoutPurchaseOrderInput[] | Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput[]
  connectOrCreate?: Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput | Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput[]
  createMany?: Prisma.StockReceiptCreateManyPurchaseOrderInputEnvelope
  connect?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
}

export type StockReceiptUpdateManyWithoutPurchaseOrderNestedInput = {
  create?: Prisma.XOR<Prisma.StockReceiptCreateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput> | Prisma.StockReceiptCreateWithoutPurchaseOrderInput[] | Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput[]
  connectOrCreate?: Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput | Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput[]
  upsert?: Prisma.StockReceiptUpsertWithWhereUniqueWithoutPurchaseOrderInput | Prisma.StockReceiptUpsertWithWhereUniqueWithoutPurchaseOrderInput[]
  createMany?: Prisma.StockReceiptCreateManyPurchaseOrderInputEnvelope
  set?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  disconnect?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  delete?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  connect?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  update?: Prisma.StockReceiptUpdateWithWhereUniqueWithoutPurchaseOrderInput | Prisma.StockReceiptUpdateWithWhereUniqueWithoutPurchaseOrderInput[]
  updateMany?: Prisma.StockReceiptUpdateManyWithWhereWithoutPurchaseOrderInput | Prisma.StockReceiptUpdateManyWithWhereWithoutPurchaseOrderInput[]
  deleteMany?: Prisma.StockReceiptScalarWhereInput | Prisma.StockReceiptScalarWhereInput[]
}

export type StockReceiptUncheckedUpdateManyWithoutPurchaseOrderNestedInput = {
  create?: Prisma.XOR<Prisma.StockReceiptCreateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput> | Prisma.StockReceiptCreateWithoutPurchaseOrderInput[] | Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput[]
  connectOrCreate?: Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput | Prisma.StockReceiptCreateOrConnectWithoutPurchaseOrderInput[]
  upsert?: Prisma.StockReceiptUpsertWithWhereUniqueWithoutPurchaseOrderInput | Prisma.StockReceiptUpsertWithWhereUniqueWithoutPurchaseOrderInput[]
  createMany?: Prisma.StockReceiptCreateManyPurchaseOrderInputEnvelope
  set?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  disconnect?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  delete?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  connect?: Prisma.StockReceiptWhereUniqueInput | Prisma.StockReceiptWhereUniqueInput[]
  update?: Prisma.StockReceiptUpdateWithWhereUniqueWithoutPurchaseOrderInput | Prisma.StockReceiptUpdateWithWhereUniqueWithoutPurchaseOrderInput[]
  updateMany?: Prisma.StockReceiptUpdateManyWithWhereWithoutPurchaseOrderInput | Prisma.StockReceiptUpdateManyWithWhereWithoutPurchaseOrderInput[]
  deleteMany?: Prisma.StockReceiptScalarWhereInput | Prisma.StockReceiptScalarWhereInput[]
}

export type StockReceiptCreateWithoutPurchaseOrderInput = {
  id?: string
  receivedById: string
  notes?: string | null
  createdAt?: Date | string
}

export type StockReceiptUncheckedCreateWithoutPurchaseOrderInput = {
  id?: string
  receivedById: string
  notes?: string | null
  createdAt?: Date | string
}

export type StockReceiptCreateOrConnectWithoutPurchaseOrderInput = {
  where: Prisma.StockReceiptWhereUniqueInput
  create: Prisma.XOR<Prisma.StockReceiptCreateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput>
}

export type StockReceiptCreateManyPurchaseOrderInputEnvelope = {
  data: Prisma.StockReceiptCreateManyPurchaseOrderInput | Prisma.StockReceiptCreateManyPurchaseOrderInput[]
  skipDuplicates?: boolean
}

export type StockReceiptUpsertWithWhereUniqueWithoutPurchaseOrderInput = {
  where: Prisma.StockReceiptWhereUniqueInput
  update: Prisma.XOR<Prisma.StockReceiptUpdateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedUpdateWithoutPurchaseOrderInput>
  create: Prisma.XOR<Prisma.StockReceiptCreateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedCreateWithoutPurchaseOrderInput>
}

export type StockReceiptUpdateWithWhereUniqueWithoutPurchaseOrderInput = {
  where: Prisma.StockReceiptWhereUniqueInput
  data: Prisma.XOR<Prisma.StockReceiptUpdateWithoutPurchaseOrderInput, Prisma.StockReceiptUncheckedUpdateWithoutPurchaseOrderInput>
}

export type StockReceiptUpdateManyWithWhereWithoutPurchaseOrderInput = {
  where: Prisma.StockReceiptScalarWhereInput
  data: Prisma.XOR<Prisma.StockReceiptUpdateManyMutationInput, Prisma.StockReceiptUncheckedUpdateManyWithoutPurchaseOrderInput>
}

export type StockReceiptScalarWhereInput = {
  AND?: Prisma.StockReceiptScalarWhereInput | Prisma.StockReceiptScalarWhereInput[]
  OR?: Prisma.StockReceiptScalarWhereInput[]
  NOT?: Prisma.StockReceiptScalarWhereInput | Prisma.StockReceiptScalarWhereInput[]
  id?: Prisma.StringFilter<"StockReceipt"> | string
  purchaseOrderId?: Prisma.StringNullableFilter<"StockReceipt"> | string | null
  receivedById?: Prisma.StringFilter<"StockReceipt"> | string
  notes?: Prisma.StringNullableFilter<"StockReceipt"> | string | null
  createdAt?: Prisma.DateTimeFilter<"StockReceipt"> | Date | string
}

export type StockReceiptCreateManyPurchaseOrderInput = {
  id?: string
  receivedById: string
  notes?: string | null
  createdAt?: Date | string
}

export type StockReceiptUpdateWithoutPurchaseOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receivedById?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockReceiptUncheckedUpdateWithoutPurchaseOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receivedById?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StockReceiptUncheckedUpdateManyWithoutPurchaseOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receivedById?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type StockReceiptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  purchaseOrderId?: boolean
  receivedById?: boolean
  notes?: boolean
  createdAt?: boolean
  purchaseOrder?: boolean | Prisma.StockReceipt$purchaseOrderArgs<ExtArgs>
}, ExtArgs["result"]["stockReceipt"]>

export type StockReceiptSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  purchaseOrderId?: boolean
  receivedById?: boolean
  notes?: boolean
  createdAt?: boolean
  purchaseOrder?: boolean | Prisma.StockReceipt$purchaseOrderArgs<ExtArgs>
}, ExtArgs["result"]["stockReceipt"]>

export type StockReceiptSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  purchaseOrderId?: boolean
  receivedById?: boolean
  notes?: boolean
  createdAt?: boolean
  purchaseOrder?: boolean | Prisma.StockReceipt$purchaseOrderArgs<ExtArgs>
}, ExtArgs["result"]["stockReceipt"]>

export type StockReceiptSelectScalar = {
  id?: boolean
  purchaseOrderId?: boolean
  receivedById?: boolean
  notes?: boolean
  createdAt?: boolean
}

export type StockReceiptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "purchaseOrderId" | "receivedById" | "notes" | "createdAt", ExtArgs["result"]["stockReceipt"]>
export type StockReceiptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  purchaseOrder?: boolean | Prisma.StockReceipt$purchaseOrderArgs<ExtArgs>
}
export type StockReceiptIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  purchaseOrder?: boolean | Prisma.StockReceipt$purchaseOrderArgs<ExtArgs>
}
export type StockReceiptIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  purchaseOrder?: boolean | Prisma.StockReceipt$purchaseOrderArgs<ExtArgs>
}

export type $StockReceiptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StockReceipt"
  objects: {
    purchaseOrder: Prisma.$PurchaseOrderPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    purchaseOrderId: string | null
    receivedById: string
    notes: string | null
    createdAt: Date
  }, ExtArgs["result"]["stockReceipt"]>
  composites: {}
}

export type StockReceiptGetPayload<S extends boolean | null | undefined | StockReceiptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload, S>

export type StockReceiptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StockReceiptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StockReceiptCountAggregateInputType | true
  }

export interface StockReceiptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StockReceipt'], meta: { name: 'StockReceipt' } }
  /**
   * Find zero or one StockReceipt that matches the filter.
   * @param {StockReceiptFindUniqueArgs} args - Arguments to find a StockReceipt
   * @example
   * // Get one StockReceipt
   * const stockReceipt = await prisma.stockReceipt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StockReceiptFindUniqueArgs>(args: Prisma.SelectSubset<T, StockReceiptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StockReceipt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StockReceiptFindUniqueOrThrowArgs} args - Arguments to find a StockReceipt
   * @example
   * // Get one StockReceipt
   * const stockReceipt = await prisma.stockReceipt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StockReceiptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StockReceiptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockReceipt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockReceiptFindFirstArgs} args - Arguments to find a StockReceipt
   * @example
   * // Get one StockReceipt
   * const stockReceipt = await prisma.stockReceipt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StockReceiptFindFirstArgs>(args?: Prisma.SelectSubset<T, StockReceiptFindFirstArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StockReceipt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockReceiptFindFirstOrThrowArgs} args - Arguments to find a StockReceipt
   * @example
   * // Get one StockReceipt
   * const stockReceipt = await prisma.stockReceipt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StockReceiptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StockReceiptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StockReceipts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockReceiptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StockReceipts
   * const stockReceipts = await prisma.stockReceipt.findMany()
   * 
   * // Get first 10 StockReceipts
   * const stockReceipts = await prisma.stockReceipt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const stockReceiptWithIdOnly = await prisma.stockReceipt.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StockReceiptFindManyArgs>(args?: Prisma.SelectSubset<T, StockReceiptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StockReceipt.
   * @param {StockReceiptCreateArgs} args - Arguments to create a StockReceipt.
   * @example
   * // Create one StockReceipt
   * const StockReceipt = await prisma.stockReceipt.create({
   *   data: {
   *     // ... data to create a StockReceipt
   *   }
   * })
   * 
   */
  create<T extends StockReceiptCreateArgs>(args: Prisma.SelectSubset<T, StockReceiptCreateArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StockReceipts.
   * @param {StockReceiptCreateManyArgs} args - Arguments to create many StockReceipts.
   * @example
   * // Create many StockReceipts
   * const stockReceipt = await prisma.stockReceipt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StockReceiptCreateManyArgs>(args?: Prisma.SelectSubset<T, StockReceiptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StockReceipts and returns the data saved in the database.
   * @param {StockReceiptCreateManyAndReturnArgs} args - Arguments to create many StockReceipts.
   * @example
   * // Create many StockReceipts
   * const stockReceipt = await prisma.stockReceipt.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StockReceipts and only return the `id`
   * const stockReceiptWithIdOnly = await prisma.stockReceipt.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StockReceiptCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StockReceiptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StockReceipt.
   * @param {StockReceiptDeleteArgs} args - Arguments to delete one StockReceipt.
   * @example
   * // Delete one StockReceipt
   * const StockReceipt = await prisma.stockReceipt.delete({
   *   where: {
   *     // ... filter to delete one StockReceipt
   *   }
   * })
   * 
   */
  delete<T extends StockReceiptDeleteArgs>(args: Prisma.SelectSubset<T, StockReceiptDeleteArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StockReceipt.
   * @param {StockReceiptUpdateArgs} args - Arguments to update one StockReceipt.
   * @example
   * // Update one StockReceipt
   * const stockReceipt = await prisma.stockReceipt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StockReceiptUpdateArgs>(args: Prisma.SelectSubset<T, StockReceiptUpdateArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StockReceipts.
   * @param {StockReceiptDeleteManyArgs} args - Arguments to filter StockReceipts to delete.
   * @example
   * // Delete a few StockReceipts
   * const { count } = await prisma.stockReceipt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StockReceiptDeleteManyArgs>(args?: Prisma.SelectSubset<T, StockReceiptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StockReceipts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockReceiptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StockReceipts
   * const stockReceipt = await prisma.stockReceipt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StockReceiptUpdateManyArgs>(args: Prisma.SelectSubset<T, StockReceiptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StockReceipts and returns the data updated in the database.
   * @param {StockReceiptUpdateManyAndReturnArgs} args - Arguments to update many StockReceipts.
   * @example
   * // Update many StockReceipts
   * const stockReceipt = await prisma.stockReceipt.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StockReceipts and only return the `id`
   * const stockReceiptWithIdOnly = await prisma.stockReceipt.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StockReceiptUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StockReceiptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StockReceipt.
   * @param {StockReceiptUpsertArgs} args - Arguments to update or create a StockReceipt.
   * @example
   * // Update or create a StockReceipt
   * const stockReceipt = await prisma.stockReceipt.upsert({
   *   create: {
   *     // ... data to create a StockReceipt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StockReceipt we want to update
   *   }
   * })
   */
  upsert<T extends StockReceiptUpsertArgs>(args: Prisma.SelectSubset<T, StockReceiptUpsertArgs<ExtArgs>>): Prisma.Prisma__StockReceiptClient<runtime.Types.Result.GetResult<Prisma.$StockReceiptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StockReceipts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockReceiptCountArgs} args - Arguments to filter StockReceipts to count.
   * @example
   * // Count the number of StockReceipts
   * const count = await prisma.stockReceipt.count({
   *   where: {
   *     // ... the filter for the StockReceipts we want to count
   *   }
   * })
  **/
  count<T extends StockReceiptCountArgs>(
    args?: Prisma.Subset<T, StockReceiptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StockReceiptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StockReceipt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockReceiptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StockReceiptAggregateArgs>(args: Prisma.Subset<T, StockReceiptAggregateArgs>): Prisma.PrismaPromise<GetStockReceiptAggregateType<T>>

  /**
   * Group by StockReceipt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StockReceiptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StockReceiptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StockReceiptGroupByArgs['orderBy'] }
      : { orderBy?: StockReceiptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StockReceiptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockReceiptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StockReceipt model
 */
readonly fields: StockReceiptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StockReceipt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StockReceiptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  purchaseOrder<T extends Prisma.StockReceipt$purchaseOrderArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.StockReceipt$purchaseOrderArgs<ExtArgs>>): Prisma.Prisma__PurchaseOrderClient<runtime.Types.Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StockReceipt model
 */
export interface StockReceiptFieldRefs {
  readonly id: Prisma.FieldRef<"StockReceipt", 'String'>
  readonly purchaseOrderId: Prisma.FieldRef<"StockReceipt", 'String'>
  readonly receivedById: Prisma.FieldRef<"StockReceipt", 'String'>
  readonly notes: Prisma.FieldRef<"StockReceipt", 'String'>
  readonly createdAt: Prisma.FieldRef<"StockReceipt", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StockReceipt findUnique
 */
export type StockReceiptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * Filter, which StockReceipt to fetch.
   */
  where: Prisma.StockReceiptWhereUniqueInput
}

/**
 * StockReceipt findUniqueOrThrow
 */
export type StockReceiptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * Filter, which StockReceipt to fetch.
   */
  where: Prisma.StockReceiptWhereUniqueInput
}

/**
 * StockReceipt findFirst
 */
export type StockReceiptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * Filter, which StockReceipt to fetch.
   */
  where?: Prisma.StockReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockReceipts to fetch.
   */
  orderBy?: Prisma.StockReceiptOrderByWithRelationInput | Prisma.StockReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockReceipts.
   */
  cursor?: Prisma.StockReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockReceipts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockReceipts.
   */
  distinct?: Prisma.StockReceiptScalarFieldEnum | Prisma.StockReceiptScalarFieldEnum[]
}

/**
 * StockReceipt findFirstOrThrow
 */
export type StockReceiptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * Filter, which StockReceipt to fetch.
   */
  where?: Prisma.StockReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockReceipts to fetch.
   */
  orderBy?: Prisma.StockReceiptOrderByWithRelationInput | Prisma.StockReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StockReceipts.
   */
  cursor?: Prisma.StockReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockReceipts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StockReceipts.
   */
  distinct?: Prisma.StockReceiptScalarFieldEnum | Prisma.StockReceiptScalarFieldEnum[]
}

/**
 * StockReceipt findMany
 */
export type StockReceiptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * Filter, which StockReceipts to fetch.
   */
  where?: Prisma.StockReceiptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StockReceipts to fetch.
   */
  orderBy?: Prisma.StockReceiptOrderByWithRelationInput | Prisma.StockReceiptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StockReceipts.
   */
  cursor?: Prisma.StockReceiptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StockReceipts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StockReceipts.
   */
  skip?: number
  distinct?: Prisma.StockReceiptScalarFieldEnum | Prisma.StockReceiptScalarFieldEnum[]
}

/**
 * StockReceipt create
 */
export type StockReceiptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * The data needed to create a StockReceipt.
   */
  data: Prisma.XOR<Prisma.StockReceiptCreateInput, Prisma.StockReceiptUncheckedCreateInput>
}

/**
 * StockReceipt createMany
 */
export type StockReceiptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StockReceipts.
   */
  data: Prisma.StockReceiptCreateManyInput | Prisma.StockReceiptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StockReceipt createManyAndReturn
 */
export type StockReceiptCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * The data used to create many StockReceipts.
   */
  data: Prisma.StockReceiptCreateManyInput | Prisma.StockReceiptCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * StockReceipt update
 */
export type StockReceiptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * The data needed to update a StockReceipt.
   */
  data: Prisma.XOR<Prisma.StockReceiptUpdateInput, Prisma.StockReceiptUncheckedUpdateInput>
  /**
   * Choose, which StockReceipt to update.
   */
  where: Prisma.StockReceiptWhereUniqueInput
}

/**
 * StockReceipt updateMany
 */
export type StockReceiptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StockReceipts.
   */
  data: Prisma.XOR<Prisma.StockReceiptUpdateManyMutationInput, Prisma.StockReceiptUncheckedUpdateManyInput>
  /**
   * Filter which StockReceipts to update
   */
  where?: Prisma.StockReceiptWhereInput
  /**
   * Limit how many StockReceipts to update.
   */
  limit?: number
}

/**
 * StockReceipt updateManyAndReturn
 */
export type StockReceiptUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * The data used to update StockReceipts.
   */
  data: Prisma.XOR<Prisma.StockReceiptUpdateManyMutationInput, Prisma.StockReceiptUncheckedUpdateManyInput>
  /**
   * Filter which StockReceipts to update
   */
  where?: Prisma.StockReceiptWhereInput
  /**
   * Limit how many StockReceipts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * StockReceipt upsert
 */
export type StockReceiptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * The filter to search for the StockReceipt to update in case it exists.
   */
  where: Prisma.StockReceiptWhereUniqueInput
  /**
   * In case the StockReceipt found by the `where` argument doesn't exist, create a new StockReceipt with this data.
   */
  create: Prisma.XOR<Prisma.StockReceiptCreateInput, Prisma.StockReceiptUncheckedCreateInput>
  /**
   * In case the StockReceipt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StockReceiptUpdateInput, Prisma.StockReceiptUncheckedUpdateInput>
}

/**
 * StockReceipt delete
 */
export type StockReceiptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
  /**
   * Filter which StockReceipt to delete.
   */
  where: Prisma.StockReceiptWhereUniqueInput
}

/**
 * StockReceipt deleteMany
 */
export type StockReceiptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StockReceipts to delete
   */
  where?: Prisma.StockReceiptWhereInput
  /**
   * Limit how many StockReceipts to delete.
   */
  limit?: number
}

/**
 * StockReceipt.purchaseOrder
 */
export type StockReceipt$purchaseOrderArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseOrder
   */
  select?: Prisma.PurchaseOrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseOrder
   */
  omit?: Prisma.PurchaseOrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseOrderInclude<ExtArgs> | null
  where?: Prisma.PurchaseOrderWhereInput
}

/**
 * StockReceipt without action
 */
export type StockReceiptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StockReceipt
   */
  select?: Prisma.StockReceiptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StockReceipt
   */
  omit?: Prisma.StockReceiptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StockReceiptInclude<ExtArgs> | null
}
