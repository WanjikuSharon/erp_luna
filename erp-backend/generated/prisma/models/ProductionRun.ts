
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProductionRun` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProductionRun
 * 
 */
export type ProductionRunModel = runtime.Types.Result.DefaultSelection<Prisma.$ProductionRunPayload>

export type AggregateProductionRun = {
  _count: ProductionRunCountAggregateOutputType | null
  _avg: ProductionRunAvgAggregateOutputType | null
  _sum: ProductionRunSumAggregateOutputType | null
  _min: ProductionRunMinAggregateOutputType | null
  _max: ProductionRunMaxAggregateOutputType | null
}

export type ProductionRunAvgAggregateOutputType = {
  quantityToProduce: number | null
  quantityProduced: number | null
}

export type ProductionRunSumAggregateOutputType = {
  quantityToProduce: number | null
  quantityProduced: number | null
}

export type ProductionRunMinAggregateOutputType = {
  id: string | null
  productId: string | null
  quantityToProduce: number | null
  quantityProduced: number | null
  status: $Enums.RunStatus | null
  notes: string | null
  createdAt: Date | null
  completedAt: Date | null
}

export type ProductionRunMaxAggregateOutputType = {
  id: string | null
  productId: string | null
  quantityToProduce: number | null
  quantityProduced: number | null
  status: $Enums.RunStatus | null
  notes: string | null
  createdAt: Date | null
  completedAt: Date | null
}

export type ProductionRunCountAggregateOutputType = {
  id: number
  productId: number
  quantityToProduce: number
  quantityProduced: number
  status: number
  notes: number
  createdAt: number
  completedAt: number
  _all: number
}


export type ProductionRunAvgAggregateInputType = {
  quantityToProduce?: true
  quantityProduced?: true
}

export type ProductionRunSumAggregateInputType = {
  quantityToProduce?: true
  quantityProduced?: true
}

export type ProductionRunMinAggregateInputType = {
  id?: true
  productId?: true
  quantityToProduce?: true
  quantityProduced?: true
  status?: true
  notes?: true
  createdAt?: true
  completedAt?: true
}

export type ProductionRunMaxAggregateInputType = {
  id?: true
  productId?: true
  quantityToProduce?: true
  quantityProduced?: true
  status?: true
  notes?: true
  createdAt?: true
  completedAt?: true
}

export type ProductionRunCountAggregateInputType = {
  id?: true
  productId?: true
  quantityToProduce?: true
  quantityProduced?: true
  status?: true
  notes?: true
  createdAt?: true
  completedAt?: true
  _all?: true
}

export type ProductionRunAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductionRun to aggregate.
   */
  where?: Prisma.ProductionRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductionRuns to fetch.
   */
  orderBy?: Prisma.ProductionRunOrderByWithRelationInput | Prisma.ProductionRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProductionRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductionRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductionRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProductionRuns
  **/
  _count?: true | ProductionRunCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProductionRunAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProductionRunSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProductionRunMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProductionRunMaxAggregateInputType
}

export type GetProductionRunAggregateType<T extends ProductionRunAggregateArgs> = {
      [P in keyof T & keyof AggregateProductionRun]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProductionRun[P]>
    : Prisma.GetScalarType<T[P], AggregateProductionRun[P]>
}




export type ProductionRunGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProductionRunWhereInput
  orderBy?: Prisma.ProductionRunOrderByWithAggregationInput | Prisma.ProductionRunOrderByWithAggregationInput[]
  by: Prisma.ProductionRunScalarFieldEnum[] | Prisma.ProductionRunScalarFieldEnum
  having?: Prisma.ProductionRunScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProductionRunCountAggregateInputType | true
  _avg?: ProductionRunAvgAggregateInputType
  _sum?: ProductionRunSumAggregateInputType
  _min?: ProductionRunMinAggregateInputType
  _max?: ProductionRunMaxAggregateInputType
}

export type ProductionRunGroupByOutputType = {
  id: string
  productId: string
  quantityToProduce: number
  quantityProduced: number | null
  status: $Enums.RunStatus
  notes: string | null
  createdAt: Date
  completedAt: Date | null
  _count: ProductionRunCountAggregateOutputType | null
  _avg: ProductionRunAvgAggregateOutputType | null
  _sum: ProductionRunSumAggregateOutputType | null
  _min: ProductionRunMinAggregateOutputType | null
  _max: ProductionRunMaxAggregateOutputType | null
}

type GetProductionRunGroupByPayload<T extends ProductionRunGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProductionRunGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProductionRunGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProductionRunGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProductionRunGroupByOutputType[P]>
      }
    >
  >



export type ProductionRunWhereInput = {
  AND?: Prisma.ProductionRunWhereInput | Prisma.ProductionRunWhereInput[]
  OR?: Prisma.ProductionRunWhereInput[]
  NOT?: Prisma.ProductionRunWhereInput | Prisma.ProductionRunWhereInput[]
  id?: Prisma.StringFilter<"ProductionRun"> | string
  productId?: Prisma.StringFilter<"ProductionRun"> | string
  quantityToProduce?: Prisma.IntFilter<"ProductionRun"> | number
  quantityProduced?: Prisma.IntNullableFilter<"ProductionRun"> | number | null
  status?: Prisma.EnumRunStatusFilter<"ProductionRun"> | $Enums.RunStatus
  notes?: Prisma.StringNullableFilter<"ProductionRun"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ProductionRun"> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<"ProductionRun"> | Date | string | null
}

export type ProductionRunOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantityToProduce?: Prisma.SortOrder
  quantityProduced?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type ProductionRunWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProductionRunWhereInput | Prisma.ProductionRunWhereInput[]
  OR?: Prisma.ProductionRunWhereInput[]
  NOT?: Prisma.ProductionRunWhereInput | Prisma.ProductionRunWhereInput[]
  productId?: Prisma.StringFilter<"ProductionRun"> | string
  quantityToProduce?: Prisma.IntFilter<"ProductionRun"> | number
  quantityProduced?: Prisma.IntNullableFilter<"ProductionRun"> | number | null
  status?: Prisma.EnumRunStatusFilter<"ProductionRun"> | $Enums.RunStatus
  notes?: Prisma.StringNullableFilter<"ProductionRun"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ProductionRun"> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<"ProductionRun"> | Date | string | null
}, "id">

export type ProductionRunOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantityToProduce?: Prisma.SortOrder
  quantityProduced?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ProductionRunCountOrderByAggregateInput
  _avg?: Prisma.ProductionRunAvgOrderByAggregateInput
  _max?: Prisma.ProductionRunMaxOrderByAggregateInput
  _min?: Prisma.ProductionRunMinOrderByAggregateInput
  _sum?: Prisma.ProductionRunSumOrderByAggregateInput
}

export type ProductionRunScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProductionRunScalarWhereWithAggregatesInput | Prisma.ProductionRunScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProductionRunScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProductionRunScalarWhereWithAggregatesInput | Prisma.ProductionRunScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProductionRun"> | string
  productId?: Prisma.StringWithAggregatesFilter<"ProductionRun"> | string
  quantityToProduce?: Prisma.IntWithAggregatesFilter<"ProductionRun"> | number
  quantityProduced?: Prisma.IntNullableWithAggregatesFilter<"ProductionRun"> | number | null
  status?: Prisma.EnumRunStatusWithAggregatesFilter<"ProductionRun"> | $Enums.RunStatus
  notes?: Prisma.StringNullableWithAggregatesFilter<"ProductionRun"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProductionRun"> | Date | string
  completedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ProductionRun"> | Date | string | null
}

export type ProductionRunCreateInput = {
  id?: string
  productId: string
  quantityToProduce: number
  quantityProduced?: number | null
  status?: $Enums.RunStatus
  notes?: string | null
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type ProductionRunUncheckedCreateInput = {
  id?: string
  productId: string
  quantityToProduce: number
  quantityProduced?: number | null
  status?: $Enums.RunStatus
  notes?: string | null
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type ProductionRunUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityToProduce?: Prisma.IntFieldUpdateOperationsInput | number
  quantityProduced?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumRunStatusFieldUpdateOperationsInput | $Enums.RunStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ProductionRunUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityToProduce?: Prisma.IntFieldUpdateOperationsInput | number
  quantityProduced?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumRunStatusFieldUpdateOperationsInput | $Enums.RunStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ProductionRunCreateManyInput = {
  id?: string
  productId: string
  quantityToProduce: number
  quantityProduced?: number | null
  status?: $Enums.RunStatus
  notes?: string | null
  createdAt?: Date | string
  completedAt?: Date | string | null
}

export type ProductionRunUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityToProduce?: Prisma.IntFieldUpdateOperationsInput | number
  quantityProduced?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumRunStatusFieldUpdateOperationsInput | $Enums.RunStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ProductionRunUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantityToProduce?: Prisma.IntFieldUpdateOperationsInput | number
  quantityProduced?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumRunStatusFieldUpdateOperationsInput | $Enums.RunStatus
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ProductionRunCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantityToProduce?: Prisma.SortOrder
  quantityProduced?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type ProductionRunAvgOrderByAggregateInput = {
  quantityToProduce?: Prisma.SortOrder
  quantityProduced?: Prisma.SortOrder
}

export type ProductionRunMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantityToProduce?: Prisma.SortOrder
  quantityProduced?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type ProductionRunMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantityToProduce?: Prisma.SortOrder
  quantityProduced?: Prisma.SortOrder
  status?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type ProductionRunSumOrderByAggregateInput = {
  quantityToProduce?: Prisma.SortOrder
  quantityProduced?: Prisma.SortOrder
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumRunStatusFieldUpdateOperationsInput = {
  set?: $Enums.RunStatus
}



export type ProductionRunSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  quantityToProduce?: boolean
  quantityProduced?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["productionRun"]>

export type ProductionRunSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  quantityToProduce?: boolean
  quantityProduced?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["productionRun"]>

export type ProductionRunSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  productId?: boolean
  quantityToProduce?: boolean
  quantityProduced?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  completedAt?: boolean
}, ExtArgs["result"]["productionRun"]>

export type ProductionRunSelectScalar = {
  id?: boolean
  productId?: boolean
  quantityToProduce?: boolean
  quantityProduced?: boolean
  status?: boolean
  notes?: boolean
  createdAt?: boolean
  completedAt?: boolean
}

export type ProductionRunOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "productId" | "quantityToProduce" | "quantityProduced" | "status" | "notes" | "createdAt" | "completedAt", ExtArgs["result"]["productionRun"]>

export type $ProductionRunPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProductionRun"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    productId: string
    quantityToProduce: number
    quantityProduced: number | null
    status: $Enums.RunStatus
    notes: string | null
    createdAt: Date
    completedAt: Date | null
  }, ExtArgs["result"]["productionRun"]>
  composites: {}
}

export type ProductionRunGetPayload<S extends boolean | null | undefined | ProductionRunDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload, S>

export type ProductionRunCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProductionRunFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProductionRunCountAggregateInputType | true
  }

export interface ProductionRunDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductionRun'], meta: { name: 'ProductionRun' } }
  /**
   * Find zero or one ProductionRun that matches the filter.
   * @param {ProductionRunFindUniqueArgs} args - Arguments to find a ProductionRun
   * @example
   * // Get one ProductionRun
   * const productionRun = await prisma.productionRun.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProductionRunFindUniqueArgs>(args: Prisma.SelectSubset<T, ProductionRunFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProductionRun that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProductionRunFindUniqueOrThrowArgs} args - Arguments to find a ProductionRun
   * @example
   * // Get one ProductionRun
   * const productionRun = await prisma.productionRun.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProductionRunFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProductionRunFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductionRun that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductionRunFindFirstArgs} args - Arguments to find a ProductionRun
   * @example
   * // Get one ProductionRun
   * const productionRun = await prisma.productionRun.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProductionRunFindFirstArgs>(args?: Prisma.SelectSubset<T, ProductionRunFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProductionRun that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductionRunFindFirstOrThrowArgs} args - Arguments to find a ProductionRun
   * @example
   * // Get one ProductionRun
   * const productionRun = await prisma.productionRun.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProductionRunFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProductionRunFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProductionRuns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductionRunFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProductionRuns
   * const productionRuns = await prisma.productionRun.findMany()
   * 
   * // Get first 10 ProductionRuns
   * const productionRuns = await prisma.productionRun.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const productionRunWithIdOnly = await prisma.productionRun.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProductionRunFindManyArgs>(args?: Prisma.SelectSubset<T, ProductionRunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProductionRun.
   * @param {ProductionRunCreateArgs} args - Arguments to create a ProductionRun.
   * @example
   * // Create one ProductionRun
   * const ProductionRun = await prisma.productionRun.create({
   *   data: {
   *     // ... data to create a ProductionRun
   *   }
   * })
   * 
   */
  create<T extends ProductionRunCreateArgs>(args: Prisma.SelectSubset<T, ProductionRunCreateArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProductionRuns.
   * @param {ProductionRunCreateManyArgs} args - Arguments to create many ProductionRuns.
   * @example
   * // Create many ProductionRuns
   * const productionRun = await prisma.productionRun.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProductionRunCreateManyArgs>(args?: Prisma.SelectSubset<T, ProductionRunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProductionRuns and returns the data saved in the database.
   * @param {ProductionRunCreateManyAndReturnArgs} args - Arguments to create many ProductionRuns.
   * @example
   * // Create many ProductionRuns
   * const productionRun = await prisma.productionRun.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProductionRuns and only return the `id`
   * const productionRunWithIdOnly = await prisma.productionRun.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProductionRunCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProductionRunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProductionRun.
   * @param {ProductionRunDeleteArgs} args - Arguments to delete one ProductionRun.
   * @example
   * // Delete one ProductionRun
   * const ProductionRun = await prisma.productionRun.delete({
   *   where: {
   *     // ... filter to delete one ProductionRun
   *   }
   * })
   * 
   */
  delete<T extends ProductionRunDeleteArgs>(args: Prisma.SelectSubset<T, ProductionRunDeleteArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProductionRun.
   * @param {ProductionRunUpdateArgs} args - Arguments to update one ProductionRun.
   * @example
   * // Update one ProductionRun
   * const productionRun = await prisma.productionRun.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProductionRunUpdateArgs>(args: Prisma.SelectSubset<T, ProductionRunUpdateArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProductionRuns.
   * @param {ProductionRunDeleteManyArgs} args - Arguments to filter ProductionRuns to delete.
   * @example
   * // Delete a few ProductionRuns
   * const { count } = await prisma.productionRun.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProductionRunDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProductionRunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductionRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductionRunUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProductionRuns
   * const productionRun = await prisma.productionRun.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProductionRunUpdateManyArgs>(args: Prisma.SelectSubset<T, ProductionRunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProductionRuns and returns the data updated in the database.
   * @param {ProductionRunUpdateManyAndReturnArgs} args - Arguments to update many ProductionRuns.
   * @example
   * // Update many ProductionRuns
   * const productionRun = await prisma.productionRun.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProductionRuns and only return the `id`
   * const productionRunWithIdOnly = await prisma.productionRun.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProductionRunUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProductionRunUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProductionRun.
   * @param {ProductionRunUpsertArgs} args - Arguments to update or create a ProductionRun.
   * @example
   * // Update or create a ProductionRun
   * const productionRun = await prisma.productionRun.upsert({
   *   create: {
   *     // ... data to create a ProductionRun
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProductionRun we want to update
   *   }
   * })
   */
  upsert<T extends ProductionRunUpsertArgs>(args: Prisma.SelectSubset<T, ProductionRunUpsertArgs<ExtArgs>>): Prisma.Prisma__ProductionRunClient<runtime.Types.Result.GetResult<Prisma.$ProductionRunPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProductionRuns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductionRunCountArgs} args - Arguments to filter ProductionRuns to count.
   * @example
   * // Count the number of ProductionRuns
   * const count = await prisma.productionRun.count({
   *   where: {
   *     // ... the filter for the ProductionRuns we want to count
   *   }
   * })
  **/
  count<T extends ProductionRunCountArgs>(
    args?: Prisma.Subset<T, ProductionRunCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProductionRunCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProductionRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductionRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProductionRunAggregateArgs>(args: Prisma.Subset<T, ProductionRunAggregateArgs>): Prisma.PrismaPromise<GetProductionRunAggregateType<T>>

  /**
   * Group by ProductionRun.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProductionRunGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProductionRunGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProductionRunGroupByArgs['orderBy'] }
      : { orderBy?: ProductionRunGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProductionRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductionRunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProductionRun model
 */
readonly fields: ProductionRunFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProductionRun.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProductionRunClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProductionRun model
 */
export interface ProductionRunFieldRefs {
  readonly id: Prisma.FieldRef<"ProductionRun", 'String'>
  readonly productId: Prisma.FieldRef<"ProductionRun", 'String'>
  readonly quantityToProduce: Prisma.FieldRef<"ProductionRun", 'Int'>
  readonly quantityProduced: Prisma.FieldRef<"ProductionRun", 'Int'>
  readonly status: Prisma.FieldRef<"ProductionRun", 'RunStatus'>
  readonly notes: Prisma.FieldRef<"ProductionRun", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProductionRun", 'DateTime'>
  readonly completedAt: Prisma.FieldRef<"ProductionRun", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProductionRun findUnique
 */
export type ProductionRunFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * Filter, which ProductionRun to fetch.
   */
  where: Prisma.ProductionRunWhereUniqueInput
}

/**
 * ProductionRun findUniqueOrThrow
 */
export type ProductionRunFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * Filter, which ProductionRun to fetch.
   */
  where: Prisma.ProductionRunWhereUniqueInput
}

/**
 * ProductionRun findFirst
 */
export type ProductionRunFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * Filter, which ProductionRun to fetch.
   */
  where?: Prisma.ProductionRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductionRuns to fetch.
   */
  orderBy?: Prisma.ProductionRunOrderByWithRelationInput | Prisma.ProductionRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductionRuns.
   */
  cursor?: Prisma.ProductionRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductionRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductionRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductionRuns.
   */
  distinct?: Prisma.ProductionRunScalarFieldEnum | Prisma.ProductionRunScalarFieldEnum[]
}

/**
 * ProductionRun findFirstOrThrow
 */
export type ProductionRunFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * Filter, which ProductionRun to fetch.
   */
  where?: Prisma.ProductionRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductionRuns to fetch.
   */
  orderBy?: Prisma.ProductionRunOrderByWithRelationInput | Prisma.ProductionRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProductionRuns.
   */
  cursor?: Prisma.ProductionRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductionRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductionRuns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProductionRuns.
   */
  distinct?: Prisma.ProductionRunScalarFieldEnum | Prisma.ProductionRunScalarFieldEnum[]
}

/**
 * ProductionRun findMany
 */
export type ProductionRunFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * Filter, which ProductionRuns to fetch.
   */
  where?: Prisma.ProductionRunWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProductionRuns to fetch.
   */
  orderBy?: Prisma.ProductionRunOrderByWithRelationInput | Prisma.ProductionRunOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProductionRuns.
   */
  cursor?: Prisma.ProductionRunWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProductionRuns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProductionRuns.
   */
  skip?: number
  distinct?: Prisma.ProductionRunScalarFieldEnum | Prisma.ProductionRunScalarFieldEnum[]
}

/**
 * ProductionRun create
 */
export type ProductionRunCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * The data needed to create a ProductionRun.
   */
  data: Prisma.XOR<Prisma.ProductionRunCreateInput, Prisma.ProductionRunUncheckedCreateInput>
}

/**
 * ProductionRun createMany
 */
export type ProductionRunCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProductionRuns.
   */
  data: Prisma.ProductionRunCreateManyInput | Prisma.ProductionRunCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductionRun createManyAndReturn
 */
export type ProductionRunCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * The data used to create many ProductionRuns.
   */
  data: Prisma.ProductionRunCreateManyInput | Prisma.ProductionRunCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProductionRun update
 */
export type ProductionRunUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * The data needed to update a ProductionRun.
   */
  data: Prisma.XOR<Prisma.ProductionRunUpdateInput, Prisma.ProductionRunUncheckedUpdateInput>
  /**
   * Choose, which ProductionRun to update.
   */
  where: Prisma.ProductionRunWhereUniqueInput
}

/**
 * ProductionRun updateMany
 */
export type ProductionRunUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProductionRuns.
   */
  data: Prisma.XOR<Prisma.ProductionRunUpdateManyMutationInput, Prisma.ProductionRunUncheckedUpdateManyInput>
  /**
   * Filter which ProductionRuns to update
   */
  where?: Prisma.ProductionRunWhereInput
  /**
   * Limit how many ProductionRuns to update.
   */
  limit?: number
}

/**
 * ProductionRun updateManyAndReturn
 */
export type ProductionRunUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * The data used to update ProductionRuns.
   */
  data: Prisma.XOR<Prisma.ProductionRunUpdateManyMutationInput, Prisma.ProductionRunUncheckedUpdateManyInput>
  /**
   * Filter which ProductionRuns to update
   */
  where?: Prisma.ProductionRunWhereInput
  /**
   * Limit how many ProductionRuns to update.
   */
  limit?: number
}

/**
 * ProductionRun upsert
 */
export type ProductionRunUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * The filter to search for the ProductionRun to update in case it exists.
   */
  where: Prisma.ProductionRunWhereUniqueInput
  /**
   * In case the ProductionRun found by the `where` argument doesn't exist, create a new ProductionRun with this data.
   */
  create: Prisma.XOR<Prisma.ProductionRunCreateInput, Prisma.ProductionRunUncheckedCreateInput>
  /**
   * In case the ProductionRun was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProductionRunUpdateInput, Prisma.ProductionRunUncheckedUpdateInput>
}

/**
 * ProductionRun delete
 */
export type ProductionRunDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
  /**
   * Filter which ProductionRun to delete.
   */
  where: Prisma.ProductionRunWhereUniqueInput
}

/**
 * ProductionRun deleteMany
 */
export type ProductionRunDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProductionRuns to delete
   */
  where?: Prisma.ProductionRunWhereInput
  /**
   * Limit how many ProductionRuns to delete.
   */
  limit?: number
}

/**
 * ProductionRun without action
 */
export type ProductionRunDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProductionRun
   */
  select?: Prisma.ProductionRunSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProductionRun
   */
  omit?: Prisma.ProductionRunOmit<ExtArgs> | null
}
